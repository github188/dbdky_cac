/* soapC.cpp
   Generated by gSOAP 2.8.12 from Transfcag.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.12 2013-09-05 06:54:42 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__upLoadCACDataResponse:
		return soap_in_PointerTo_ns1__upLoadCACDataResponse(soap, NULL, NULL, "ns1:upLoadCACDataResponse");
	case SOAP_TYPE_PointerTo_ns1__upLoadCACData:
		return soap_in_PointerTo_ns1__upLoadCACData(soap, NULL, NULL, "ns1:upLoadCACData");
	case SOAP_TYPE_PointerTo_ns1__uploadCMAHeartbeatInfoResponse:
		return soap_in_PointerTo_ns1__uploadCMAHeartbeatInfoResponse(soap, NULL, NULL, "ns1:uploadCMAHeartbeatInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__uploadCMAHeartbeatInfo:
		return soap_in_PointerTo_ns1__uploadCMAHeartbeatInfo(soap, NULL, NULL, "ns1:uploadCMAHeartbeatInfo");
	case SOAP_TYPE_PointerTo_ns1__uploadCMADataResponse:
		return soap_in_PointerTo_ns1__uploadCMADataResponse(soap, NULL, NULL, "ns1:uploadCMADataResponse");
	case SOAP_TYPE_PointerTo_ns1__uploadCMAData:
		return soap_in_PointerTo_ns1__uploadCMAData(soap, NULL, NULL, "ns1:uploadCMAData");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:upLoadCACDataResponse"))
		{	*type = SOAP_TYPE__ns1__upLoadCACDataResponse;
			return soap_in__ns1__upLoadCACDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:upLoadCACData"))
		{	*type = SOAP_TYPE__ns1__upLoadCACData;
			return soap_in__ns1__upLoadCACData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:uploadCMAHeartbeatInfoResponse"))
		{	*type = SOAP_TYPE__ns1__uploadCMAHeartbeatInfoResponse;
			return soap_in__ns1__uploadCMAHeartbeatInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:uploadCMAHeartbeatInfo"))
		{	*type = SOAP_TYPE__ns1__uploadCMAHeartbeatInfo;
			return soap_in__ns1__uploadCMAHeartbeatInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:uploadCMADataResponse"))
		{	*type = SOAP_TYPE__ns1__uploadCMADataResponse;
			return soap_in__ns1__uploadCMADataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:uploadCMAData"))
		{	*type = SOAP_TYPE__ns1__uploadCMAData;
			return soap_in__ns1__uploadCMAData(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__upLoadCACDataResponse:
		return ((_ns1__upLoadCACDataResponse *)ptr)->soap_out(soap, "ns1:upLoadCACDataResponse", id, NULL);
	case SOAP_TYPE__ns1__upLoadCACData:
		return ((_ns1__upLoadCACData *)ptr)->soap_out(soap, "ns1:upLoadCACData", id, NULL);
	case SOAP_TYPE__ns1__uploadCMAHeartbeatInfoResponse:
		return ((_ns1__uploadCMAHeartbeatInfoResponse *)ptr)->soap_out(soap, "ns1:uploadCMAHeartbeatInfoResponse", id, NULL);
	case SOAP_TYPE__ns1__uploadCMAHeartbeatInfo:
		return ((_ns1__uploadCMAHeartbeatInfo *)ptr)->soap_out(soap, "ns1:uploadCMAHeartbeatInfo", id, NULL);
	case SOAP_TYPE__ns1__uploadCMADataResponse:
		return ((_ns1__uploadCMADataResponse *)ptr)->soap_out(soap, "ns1:uploadCMADataResponse", id, NULL);
	case SOAP_TYPE__ns1__uploadCMAData:
		return ((_ns1__uploadCMAData *)ptr)->soap_out(soap, "ns1:uploadCMAData", id, NULL);
	case SOAP_TYPE_PointerTo_ns1__upLoadCACDataResponse:
		return soap_out_PointerTo_ns1__upLoadCACDataResponse(soap, tag, id, (_ns1__upLoadCACDataResponse *const*)ptr, "ns1:upLoadCACDataResponse");
	case SOAP_TYPE_PointerTo_ns1__upLoadCACData:
		return soap_out_PointerTo_ns1__upLoadCACData(soap, tag, id, (_ns1__upLoadCACData *const*)ptr, "ns1:upLoadCACData");
	case SOAP_TYPE_PointerTo_ns1__uploadCMAHeartbeatInfoResponse:
		return soap_out_PointerTo_ns1__uploadCMAHeartbeatInfoResponse(soap, tag, id, (_ns1__uploadCMAHeartbeatInfoResponse *const*)ptr, "ns1:uploadCMAHeartbeatInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__uploadCMAHeartbeatInfo:
		return soap_out_PointerTo_ns1__uploadCMAHeartbeatInfo(soap, tag, id, (_ns1__uploadCMAHeartbeatInfo *const*)ptr, "ns1:uploadCMAHeartbeatInfo");
	case SOAP_TYPE_PointerTo_ns1__uploadCMADataResponse:
		return soap_out_PointerTo_ns1__uploadCMADataResponse(soap, tag, id, (_ns1__uploadCMADataResponse *const*)ptr, "ns1:uploadCMADataResponse");
	case SOAP_TYPE_PointerTo_ns1__uploadCMAData:
		return soap_out_PointerTo_ns1__uploadCMAData(soap, tag, id, (_ns1__uploadCMAData *const*)ptr, "ns1:uploadCMAData");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__upLoadCACDataResponse:
		((_ns1__upLoadCACDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__upLoadCACData:
		((_ns1__upLoadCACData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__uploadCMAHeartbeatInfoResponse:
		((_ns1__uploadCMAHeartbeatInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__uploadCMAHeartbeatInfo:
		((_ns1__uploadCMAHeartbeatInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__uploadCMADataResponse:
		((_ns1__uploadCMADataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__uploadCMAData:
		((_ns1__uploadCMAData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__upLoadCACData_:
		soap_serialize___ns1__upLoadCACData_(soap, (const struct __ns1__upLoadCACData_ *)ptr);
		break;
	case SOAP_TYPE___ns1__uploadCMAHeartbeatInfo_:
		soap_serialize___ns1__uploadCMAHeartbeatInfo_(soap, (const struct __ns1__uploadCMAHeartbeatInfo_ *)ptr);
		break;
	case SOAP_TYPE___ns1__uploadCMAData_:
		soap_serialize___ns1__uploadCMAData_(soap, (const struct __ns1__uploadCMAData_ *)ptr);
		break;
	case SOAP_TYPE___ns1__upLoadCACData:
		soap_serialize___ns1__upLoadCACData(soap, (const struct __ns1__upLoadCACData *)ptr);
		break;
	case SOAP_TYPE___ns1__uploadCMAHeartbeatInfo:
		soap_serialize___ns1__uploadCMAHeartbeatInfo(soap, (const struct __ns1__uploadCMAHeartbeatInfo *)ptr);
		break;
	case SOAP_TYPE___ns1__uploadCMAData:
		soap_serialize___ns1__uploadCMAData(soap, (const struct __ns1__uploadCMAData *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__upLoadCACDataResponse:
		soap_serialize_PointerTo_ns1__upLoadCACDataResponse(soap, (_ns1__upLoadCACDataResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__upLoadCACData:
		soap_serialize_PointerTo_ns1__upLoadCACData(soap, (_ns1__upLoadCACData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__uploadCMAHeartbeatInfoResponse:
		soap_serialize_PointerTo_ns1__uploadCMAHeartbeatInfoResponse(soap, (_ns1__uploadCMAHeartbeatInfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__uploadCMAHeartbeatInfo:
		soap_serialize_PointerTo_ns1__uploadCMAHeartbeatInfo(soap, (_ns1__uploadCMAHeartbeatInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__uploadCMADataResponse:
		soap_serialize_PointerTo_ns1__uploadCMADataResponse(soap, (_ns1__uploadCMADataResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__uploadCMAData:
		soap_serialize_PointerTo_ns1__uploadCMAData(soap, (_ns1__uploadCMAData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__uploadCMAData:
		return (void*)soap_instantiate__ns1__uploadCMAData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__uploadCMADataResponse:
		return (void*)soap_instantiate__ns1__uploadCMADataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__uploadCMAHeartbeatInfo:
		return (void*)soap_instantiate__ns1__uploadCMAHeartbeatInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__uploadCMAHeartbeatInfoResponse:
		return (void*)soap_instantiate__ns1__uploadCMAHeartbeatInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__upLoadCACData:
		return (void*)soap_instantiate__ns1__upLoadCACData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__upLoadCACDataResponse:
		return (void*)soap_instantiate__ns1__upLoadCACDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__uploadCMAData:
		return (void*)soap_instantiate___ns1__uploadCMAData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__uploadCMAHeartbeatInfo:
		return (void*)soap_instantiate___ns1__uploadCMAHeartbeatInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__upLoadCACData:
		return (void*)soap_instantiate___ns1__upLoadCACData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__uploadCMAData_:
		return (void*)soap_instantiate___ns1__uploadCMAData_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__uploadCMAHeartbeatInfo_:
		return (void*)soap_instantiate___ns1__uploadCMAHeartbeatInfo_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__upLoadCACData_:
		return (void*)soap_instantiate___ns1__upLoadCACData_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE__ns1__uploadCMAData:
		if (p->size < 0)
			SOAP_DELETE((_ns1__uploadCMAData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__uploadCMAData*)p->ptr);
		break;
	case SOAP_TYPE__ns1__uploadCMADataResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__uploadCMADataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__uploadCMADataResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__uploadCMAHeartbeatInfo:
		if (p->size < 0)
			SOAP_DELETE((_ns1__uploadCMAHeartbeatInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__uploadCMAHeartbeatInfo*)p->ptr);
		break;
	case SOAP_TYPE__ns1__uploadCMAHeartbeatInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__uploadCMAHeartbeatInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__uploadCMAHeartbeatInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__upLoadCACData:
		if (p->size < 0)
			SOAP_DELETE((_ns1__upLoadCACData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__upLoadCACData*)p->ptr);
		break;
	case SOAP_TYPE__ns1__upLoadCACDataResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__upLoadCACDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__upLoadCACDataResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__uploadCMAData:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__uploadCMAData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__uploadCMAData*)p->ptr);
		break;
	case SOAP_TYPE___ns1__uploadCMAHeartbeatInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__uploadCMAHeartbeatInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__uploadCMAHeartbeatInfo*)p->ptr);
		break;
	case SOAP_TYPE___ns1__upLoadCACData:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__upLoadCACData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__upLoadCACData*)p->ptr);
		break;
	case SOAP_TYPE___ns1__uploadCMAData_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__uploadCMAData_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__uploadCMAData_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__uploadCMAHeartbeatInfo_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__uploadCMAHeartbeatInfo_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__uploadCMAHeartbeatInfo_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__upLoadCACData_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__upLoadCACData_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__upLoadCACData_*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _ns1__upLoadCACDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__upLoadCACDataResponse::upLoadCACDataResult = NULL;
	/* transient soap skipped */
}

void _ns1__upLoadCACDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__upLoadCACDataResponse::upLoadCACDataResult);
	/* transient soap skipped */
}

int _ns1__upLoadCACDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__upLoadCACDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__upLoadCACDataResponse(struct soap *soap, const char *tag, int id, const _ns1__upLoadCACDataResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__upLoadCACDataResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "upLoadCACDataResult", -1, &(a->_ns1__upLoadCACDataResponse::upLoadCACDataResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__upLoadCACDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__upLoadCACDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__upLoadCACDataResponse * SOAP_FMAC4 soap_in__ns1__upLoadCACDataResponse(struct soap *soap, const char *tag, _ns1__upLoadCACDataResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__upLoadCACDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__upLoadCACDataResponse, sizeof(_ns1__upLoadCACDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__upLoadCACDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__upLoadCACDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_upLoadCACDataResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_upLoadCACDataResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "upLoadCACDataResult", &(a->_ns1__upLoadCACDataResponse::upLoadCACDataResult), "xsd:string"))
				{	soap_flag_upLoadCACDataResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__upLoadCACDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__upLoadCACDataResponse, 0, sizeof(_ns1__upLoadCACDataResponse), 0, soap_copy__ns1__upLoadCACDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__upLoadCACDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__upLoadCACDataResponse);
	if (this->soap_out(soap, tag?tag:"ns1:upLoadCACDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__upLoadCACDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__upLoadCACDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__upLoadCACDataResponse * SOAP_FMAC4 soap_get__ns1__upLoadCACDataResponse(struct soap *soap, _ns1__upLoadCACDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__upLoadCACDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__upLoadCACDataResponse * SOAP_FMAC2 soap_instantiate__ns1__upLoadCACDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__upLoadCACDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__upLoadCACDataResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__upLoadCACDataResponse);
		if (size)
			*size = sizeof(_ns1__upLoadCACDataResponse);
		((_ns1__upLoadCACDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__upLoadCACDataResponse, n);
		if (size)
			*size = n * sizeof(_ns1__upLoadCACDataResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__upLoadCACDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__upLoadCACDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__upLoadCACDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__upLoadCACDataResponse %p -> %p\n", q, p));
	*(_ns1__upLoadCACDataResponse*)p = *(_ns1__upLoadCACDataResponse*)q;
}

void _ns1__upLoadCACData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__upLoadCACData::sXml = NULL;
	/* transient soap skipped */
}

void _ns1__upLoadCACData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__upLoadCACData::sXml);
	/* transient soap skipped */
}

int _ns1__upLoadCACData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__upLoadCACData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__upLoadCACData(struct soap *soap, const char *tag, int id, const _ns1__upLoadCACData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__upLoadCACData), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "sXml", -1, &(a->_ns1__upLoadCACData::sXml), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__upLoadCACData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__upLoadCACData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__upLoadCACData * SOAP_FMAC4 soap_in__ns1__upLoadCACData(struct soap *soap, const char *tag, _ns1__upLoadCACData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__upLoadCACData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__upLoadCACData, sizeof(_ns1__upLoadCACData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__upLoadCACData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__upLoadCACData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sXml1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sXml1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "sXml", &(a->_ns1__upLoadCACData::sXml), "xsd:string"))
				{	soap_flag_sXml1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__upLoadCACData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__upLoadCACData, 0, sizeof(_ns1__upLoadCACData), 0, soap_copy__ns1__upLoadCACData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__upLoadCACData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__upLoadCACData);
	if (this->soap_out(soap, tag?tag:"ns1:upLoadCACData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__upLoadCACData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__upLoadCACData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__upLoadCACData * SOAP_FMAC4 soap_get__ns1__upLoadCACData(struct soap *soap, _ns1__upLoadCACData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__upLoadCACData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__upLoadCACData * SOAP_FMAC2 soap_instantiate__ns1__upLoadCACData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__upLoadCACData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__upLoadCACData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__upLoadCACData);
		if (size)
			*size = sizeof(_ns1__upLoadCACData);
		((_ns1__upLoadCACData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__upLoadCACData, n);
		if (size)
			*size = n * sizeof(_ns1__upLoadCACData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__upLoadCACData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__upLoadCACData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__upLoadCACData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__upLoadCACData %p -> %p\n", q, p));
	*(_ns1__upLoadCACData*)p = *(_ns1__upLoadCACData*)q;
}

void _ns1__uploadCMAHeartbeatInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__uploadCMAHeartbeatInfoResponse::uploadCMAHeartbeatInfoResult = NULL;
	/* transient soap skipped */
}

void _ns1__uploadCMAHeartbeatInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__uploadCMAHeartbeatInfoResponse::uploadCMAHeartbeatInfoResult);
	/* transient soap skipped */
}

int _ns1__uploadCMAHeartbeatInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__uploadCMAHeartbeatInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadCMAHeartbeatInfoResponse(struct soap *soap, const char *tag, int id, const _ns1__uploadCMAHeartbeatInfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__uploadCMAHeartbeatInfoResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "uploadCMAHeartbeatInfoResult", -1, &(a->_ns1__uploadCMAHeartbeatInfoResponse::uploadCMAHeartbeatInfoResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__uploadCMAHeartbeatInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__uploadCMAHeartbeatInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__uploadCMAHeartbeatInfoResponse * SOAP_FMAC4 soap_in__ns1__uploadCMAHeartbeatInfoResponse(struct soap *soap, const char *tag, _ns1__uploadCMAHeartbeatInfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__uploadCMAHeartbeatInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__uploadCMAHeartbeatInfoResponse, sizeof(_ns1__uploadCMAHeartbeatInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__uploadCMAHeartbeatInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__uploadCMAHeartbeatInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_uploadCMAHeartbeatInfoResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_uploadCMAHeartbeatInfoResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "uploadCMAHeartbeatInfoResult", &(a->_ns1__uploadCMAHeartbeatInfoResponse::uploadCMAHeartbeatInfoResult), "xsd:string"))
				{	soap_flag_uploadCMAHeartbeatInfoResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__uploadCMAHeartbeatInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__uploadCMAHeartbeatInfoResponse, 0, sizeof(_ns1__uploadCMAHeartbeatInfoResponse), 0, soap_copy__ns1__uploadCMAHeartbeatInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__uploadCMAHeartbeatInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__uploadCMAHeartbeatInfoResponse);
	if (this->soap_out(soap, tag?tag:"ns1:uploadCMAHeartbeatInfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__uploadCMAHeartbeatInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__uploadCMAHeartbeatInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__uploadCMAHeartbeatInfoResponse * SOAP_FMAC4 soap_get__ns1__uploadCMAHeartbeatInfoResponse(struct soap *soap, _ns1__uploadCMAHeartbeatInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__uploadCMAHeartbeatInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__uploadCMAHeartbeatInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__uploadCMAHeartbeatInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__uploadCMAHeartbeatInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__uploadCMAHeartbeatInfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__uploadCMAHeartbeatInfoResponse);
		if (size)
			*size = sizeof(_ns1__uploadCMAHeartbeatInfoResponse);
		((_ns1__uploadCMAHeartbeatInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__uploadCMAHeartbeatInfoResponse, n);
		if (size)
			*size = n * sizeof(_ns1__uploadCMAHeartbeatInfoResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__uploadCMAHeartbeatInfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__uploadCMAHeartbeatInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadCMAHeartbeatInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__uploadCMAHeartbeatInfoResponse %p -> %p\n", q, p));
	*(_ns1__uploadCMAHeartbeatInfoResponse*)p = *(_ns1__uploadCMAHeartbeatInfoResponse*)q;
}

void _ns1__uploadCMAHeartbeatInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__uploadCMAHeartbeatInfo::sXml = NULL;
	/* transient soap skipped */
}

void _ns1__uploadCMAHeartbeatInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__uploadCMAHeartbeatInfo::sXml);
	/* transient soap skipped */
}

int _ns1__uploadCMAHeartbeatInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__uploadCMAHeartbeatInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadCMAHeartbeatInfo(struct soap *soap, const char *tag, int id, const _ns1__uploadCMAHeartbeatInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__uploadCMAHeartbeatInfo), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "sXml", -1, &(a->_ns1__uploadCMAHeartbeatInfo::sXml), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__uploadCMAHeartbeatInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__uploadCMAHeartbeatInfo(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__uploadCMAHeartbeatInfo * SOAP_FMAC4 soap_in__ns1__uploadCMAHeartbeatInfo(struct soap *soap, const char *tag, _ns1__uploadCMAHeartbeatInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__uploadCMAHeartbeatInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__uploadCMAHeartbeatInfo, sizeof(_ns1__uploadCMAHeartbeatInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__uploadCMAHeartbeatInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__uploadCMAHeartbeatInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sXml1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sXml1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "sXml", &(a->_ns1__uploadCMAHeartbeatInfo::sXml), "xsd:string"))
				{	soap_flag_sXml1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__uploadCMAHeartbeatInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__uploadCMAHeartbeatInfo, 0, sizeof(_ns1__uploadCMAHeartbeatInfo), 0, soap_copy__ns1__uploadCMAHeartbeatInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__uploadCMAHeartbeatInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__uploadCMAHeartbeatInfo);
	if (this->soap_out(soap, tag?tag:"ns1:uploadCMAHeartbeatInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__uploadCMAHeartbeatInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__uploadCMAHeartbeatInfo(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__uploadCMAHeartbeatInfo * SOAP_FMAC4 soap_get__ns1__uploadCMAHeartbeatInfo(struct soap *soap, _ns1__uploadCMAHeartbeatInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__uploadCMAHeartbeatInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__uploadCMAHeartbeatInfo * SOAP_FMAC2 soap_instantiate__ns1__uploadCMAHeartbeatInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__uploadCMAHeartbeatInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__uploadCMAHeartbeatInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__uploadCMAHeartbeatInfo);
		if (size)
			*size = sizeof(_ns1__uploadCMAHeartbeatInfo);
		((_ns1__uploadCMAHeartbeatInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__uploadCMAHeartbeatInfo, n);
		if (size)
			*size = n * sizeof(_ns1__uploadCMAHeartbeatInfo);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__uploadCMAHeartbeatInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__uploadCMAHeartbeatInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadCMAHeartbeatInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__uploadCMAHeartbeatInfo %p -> %p\n", q, p));
	*(_ns1__uploadCMAHeartbeatInfo*)p = *(_ns1__uploadCMAHeartbeatInfo*)q;
}

void _ns1__uploadCMADataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__uploadCMADataResponse::uploadCMADataResult = NULL;
	/* transient soap skipped */
}

void _ns1__uploadCMADataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__uploadCMADataResponse::uploadCMADataResult);
	/* transient soap skipped */
}

int _ns1__uploadCMADataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__uploadCMADataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadCMADataResponse(struct soap *soap, const char *tag, int id, const _ns1__uploadCMADataResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__uploadCMADataResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "uploadCMADataResult", -1, &(a->_ns1__uploadCMADataResponse::uploadCMADataResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__uploadCMADataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__uploadCMADataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__uploadCMADataResponse * SOAP_FMAC4 soap_in__ns1__uploadCMADataResponse(struct soap *soap, const char *tag, _ns1__uploadCMADataResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__uploadCMADataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__uploadCMADataResponse, sizeof(_ns1__uploadCMADataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__uploadCMADataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__uploadCMADataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_uploadCMADataResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_uploadCMADataResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "uploadCMADataResult", &(a->_ns1__uploadCMADataResponse::uploadCMADataResult), "xsd:string"))
				{	soap_flag_uploadCMADataResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__uploadCMADataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__uploadCMADataResponse, 0, sizeof(_ns1__uploadCMADataResponse), 0, soap_copy__ns1__uploadCMADataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__uploadCMADataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__uploadCMADataResponse);
	if (this->soap_out(soap, tag?tag:"ns1:uploadCMADataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__uploadCMADataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__uploadCMADataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__uploadCMADataResponse * SOAP_FMAC4 soap_get__ns1__uploadCMADataResponse(struct soap *soap, _ns1__uploadCMADataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__uploadCMADataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__uploadCMADataResponse * SOAP_FMAC2 soap_instantiate__ns1__uploadCMADataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__uploadCMADataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__uploadCMADataResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__uploadCMADataResponse);
		if (size)
			*size = sizeof(_ns1__uploadCMADataResponse);
		((_ns1__uploadCMADataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__uploadCMADataResponse, n);
		if (size)
			*size = n * sizeof(_ns1__uploadCMADataResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__uploadCMADataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__uploadCMADataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadCMADataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__uploadCMADataResponse %p -> %p\n", q, p));
	*(_ns1__uploadCMADataResponse*)p = *(_ns1__uploadCMADataResponse*)q;
}

void _ns1__uploadCMAData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__uploadCMAData::sXml = NULL;
	/* transient soap skipped */
}

void _ns1__uploadCMAData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__uploadCMAData::sXml);
	/* transient soap skipped */
}

int _ns1__uploadCMAData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__uploadCMAData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadCMAData(struct soap *soap, const char *tag, int id, const _ns1__uploadCMAData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__uploadCMAData), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "sXml", -1, &(a->_ns1__uploadCMAData::sXml), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__uploadCMAData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__uploadCMAData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__uploadCMAData * SOAP_FMAC4 soap_in__ns1__uploadCMAData(struct soap *soap, const char *tag, _ns1__uploadCMAData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__uploadCMAData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__uploadCMAData, sizeof(_ns1__uploadCMAData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__uploadCMAData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__uploadCMAData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sXml1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sXml1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "sXml", &(a->_ns1__uploadCMAData::sXml), "xsd:string"))
				{	soap_flag_sXml1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__uploadCMAData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__uploadCMAData, 0, sizeof(_ns1__uploadCMAData), 0, soap_copy__ns1__uploadCMAData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__uploadCMAData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__uploadCMAData);
	if (this->soap_out(soap, tag?tag:"ns1:uploadCMAData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__uploadCMAData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__uploadCMAData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__uploadCMAData * SOAP_FMAC4 soap_get__ns1__uploadCMAData(struct soap *soap, _ns1__uploadCMAData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__uploadCMAData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__uploadCMAData * SOAP_FMAC2 soap_instantiate__ns1__uploadCMAData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__uploadCMAData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__uploadCMAData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__uploadCMAData);
		if (size)
			*size = sizeof(_ns1__uploadCMAData);
		((_ns1__uploadCMAData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__uploadCMAData, n);
		if (size)
			*size = n * sizeof(_ns1__uploadCMAData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__uploadCMAData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__uploadCMAData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadCMAData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__uploadCMAData %p -> %p\n", q, p));
	*(_ns1__uploadCMAData*)p = *(_ns1__uploadCMAData*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__upLoadCACData_(struct soap *soap, struct __ns1__upLoadCACData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__upLoadCACData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__upLoadCACData_(struct soap *soap, const struct __ns1__upLoadCACData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__upLoadCACData(soap, &a->ns1__upLoadCACData);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__upLoadCACData_(struct soap *soap, const char *tag, int id, const struct __ns1__upLoadCACData_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__upLoadCACData(soap, "ns1:upLoadCACData", -1, &a->ns1__upLoadCACData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__upLoadCACData_ * SOAP_FMAC4 soap_in___ns1__upLoadCACData_(struct soap *soap, const char *tag, struct __ns1__upLoadCACData_ *a, const char *type)
{
	size_t soap_flag_ns1__upLoadCACData = 1;
	short soap_flag;
	a = (struct __ns1__upLoadCACData_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__upLoadCACData_, sizeof(struct __ns1__upLoadCACData_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__upLoadCACData_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__upLoadCACData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__upLoadCACData(soap, "ns1:upLoadCACData", &a->ns1__upLoadCACData, ""))
				{	soap_flag_ns1__upLoadCACData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__upLoadCACData_(struct soap *soap, const struct __ns1__upLoadCACData_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__upLoadCACData_(soap, tag?tag:"-ns1:upLoadCACData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__upLoadCACData_ * SOAP_FMAC4 soap_get___ns1__upLoadCACData_(struct soap *soap, struct __ns1__upLoadCACData_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__upLoadCACData_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__upLoadCACData_ * SOAP_FMAC2 soap_instantiate___ns1__upLoadCACData_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__upLoadCACData_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__upLoadCACData_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__upLoadCACData_);
		if (size)
			*size = sizeof(struct __ns1__upLoadCACData_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__upLoadCACData_, n);
		if (size)
			*size = n * sizeof(struct __ns1__upLoadCACData_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__upLoadCACData_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__upLoadCACData_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__upLoadCACData_ %p -> %p\n", q, p));
	*(struct __ns1__upLoadCACData_*)p = *(struct __ns1__upLoadCACData_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__uploadCMAHeartbeatInfo_(struct soap *soap, struct __ns1__uploadCMAHeartbeatInfo_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__uploadCMAHeartbeatInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__uploadCMAHeartbeatInfo_(struct soap *soap, const struct __ns1__uploadCMAHeartbeatInfo_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__uploadCMAHeartbeatInfo(soap, &a->ns1__uploadCMAHeartbeatInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__uploadCMAHeartbeatInfo_(struct soap *soap, const char *tag, int id, const struct __ns1__uploadCMAHeartbeatInfo_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__uploadCMAHeartbeatInfo(soap, "ns1:uploadCMAHeartbeatInfo", -1, &a->ns1__uploadCMAHeartbeatInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadCMAHeartbeatInfo_ * SOAP_FMAC4 soap_in___ns1__uploadCMAHeartbeatInfo_(struct soap *soap, const char *tag, struct __ns1__uploadCMAHeartbeatInfo_ *a, const char *type)
{
	size_t soap_flag_ns1__uploadCMAHeartbeatInfo = 1;
	short soap_flag;
	a = (struct __ns1__uploadCMAHeartbeatInfo_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__uploadCMAHeartbeatInfo_, sizeof(struct __ns1__uploadCMAHeartbeatInfo_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__uploadCMAHeartbeatInfo_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__uploadCMAHeartbeatInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__uploadCMAHeartbeatInfo(soap, "ns1:uploadCMAHeartbeatInfo", &a->ns1__uploadCMAHeartbeatInfo, ""))
				{	soap_flag_ns1__uploadCMAHeartbeatInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__uploadCMAHeartbeatInfo_(struct soap *soap, const struct __ns1__uploadCMAHeartbeatInfo_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__uploadCMAHeartbeatInfo_(soap, tag?tag:"-ns1:uploadCMAHeartbeatInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadCMAHeartbeatInfo_ * SOAP_FMAC4 soap_get___ns1__uploadCMAHeartbeatInfo_(struct soap *soap, struct __ns1__uploadCMAHeartbeatInfo_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__uploadCMAHeartbeatInfo_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__uploadCMAHeartbeatInfo_ * SOAP_FMAC2 soap_instantiate___ns1__uploadCMAHeartbeatInfo_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__uploadCMAHeartbeatInfo_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__uploadCMAHeartbeatInfo_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__uploadCMAHeartbeatInfo_);
		if (size)
			*size = sizeof(struct __ns1__uploadCMAHeartbeatInfo_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__uploadCMAHeartbeatInfo_, n);
		if (size)
			*size = n * sizeof(struct __ns1__uploadCMAHeartbeatInfo_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__uploadCMAHeartbeatInfo_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__uploadCMAHeartbeatInfo_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__uploadCMAHeartbeatInfo_ %p -> %p\n", q, p));
	*(struct __ns1__uploadCMAHeartbeatInfo_*)p = *(struct __ns1__uploadCMAHeartbeatInfo_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__uploadCMAData_(struct soap *soap, struct __ns1__uploadCMAData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__uploadCMAData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__uploadCMAData_(struct soap *soap, const struct __ns1__uploadCMAData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__uploadCMAData(soap, &a->ns1__uploadCMAData);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__uploadCMAData_(struct soap *soap, const char *tag, int id, const struct __ns1__uploadCMAData_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__uploadCMAData(soap, "ns1:uploadCMAData", -1, &a->ns1__uploadCMAData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadCMAData_ * SOAP_FMAC4 soap_in___ns1__uploadCMAData_(struct soap *soap, const char *tag, struct __ns1__uploadCMAData_ *a, const char *type)
{
	size_t soap_flag_ns1__uploadCMAData = 1;
	short soap_flag;
	a = (struct __ns1__uploadCMAData_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__uploadCMAData_, sizeof(struct __ns1__uploadCMAData_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__uploadCMAData_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__uploadCMAData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__uploadCMAData(soap, "ns1:uploadCMAData", &a->ns1__uploadCMAData, ""))
				{	soap_flag_ns1__uploadCMAData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__uploadCMAData_(struct soap *soap, const struct __ns1__uploadCMAData_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__uploadCMAData_(soap, tag?tag:"-ns1:uploadCMAData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadCMAData_ * SOAP_FMAC4 soap_get___ns1__uploadCMAData_(struct soap *soap, struct __ns1__uploadCMAData_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__uploadCMAData_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__uploadCMAData_ * SOAP_FMAC2 soap_instantiate___ns1__uploadCMAData_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__uploadCMAData_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__uploadCMAData_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__uploadCMAData_);
		if (size)
			*size = sizeof(struct __ns1__uploadCMAData_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__uploadCMAData_, n);
		if (size)
			*size = n * sizeof(struct __ns1__uploadCMAData_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__uploadCMAData_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__uploadCMAData_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__uploadCMAData_ %p -> %p\n", q, p));
	*(struct __ns1__uploadCMAData_*)p = *(struct __ns1__uploadCMAData_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__upLoadCACData(struct soap *soap, struct __ns1__upLoadCACData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__upLoadCACData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__upLoadCACData(struct soap *soap, const struct __ns1__upLoadCACData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__upLoadCACData(soap, &a->ns1__upLoadCACData);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__upLoadCACData(struct soap *soap, const char *tag, int id, const struct __ns1__upLoadCACData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__upLoadCACData(soap, "ns1:upLoadCACData", -1, &a->ns1__upLoadCACData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__upLoadCACData * SOAP_FMAC4 soap_in___ns1__upLoadCACData(struct soap *soap, const char *tag, struct __ns1__upLoadCACData *a, const char *type)
{
	size_t soap_flag_ns1__upLoadCACData = 1;
	short soap_flag;
	a = (struct __ns1__upLoadCACData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__upLoadCACData, sizeof(struct __ns1__upLoadCACData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__upLoadCACData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__upLoadCACData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__upLoadCACData(soap, "ns1:upLoadCACData", &a->ns1__upLoadCACData, ""))
				{	soap_flag_ns1__upLoadCACData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__upLoadCACData(struct soap *soap, const struct __ns1__upLoadCACData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__upLoadCACData(soap, tag?tag:"-ns1:upLoadCACData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__upLoadCACData * SOAP_FMAC4 soap_get___ns1__upLoadCACData(struct soap *soap, struct __ns1__upLoadCACData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__upLoadCACData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__upLoadCACData * SOAP_FMAC2 soap_instantiate___ns1__upLoadCACData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__upLoadCACData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__upLoadCACData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__upLoadCACData);
		if (size)
			*size = sizeof(struct __ns1__upLoadCACData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__upLoadCACData, n);
		if (size)
			*size = n * sizeof(struct __ns1__upLoadCACData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__upLoadCACData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__upLoadCACData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__upLoadCACData %p -> %p\n", q, p));
	*(struct __ns1__upLoadCACData*)p = *(struct __ns1__upLoadCACData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__uploadCMAHeartbeatInfo(struct soap *soap, struct __ns1__uploadCMAHeartbeatInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__uploadCMAHeartbeatInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__uploadCMAHeartbeatInfo(struct soap *soap, const struct __ns1__uploadCMAHeartbeatInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__uploadCMAHeartbeatInfo(soap, &a->ns1__uploadCMAHeartbeatInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__uploadCMAHeartbeatInfo(struct soap *soap, const char *tag, int id, const struct __ns1__uploadCMAHeartbeatInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__uploadCMAHeartbeatInfo(soap, "ns1:uploadCMAHeartbeatInfo", -1, &a->ns1__uploadCMAHeartbeatInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadCMAHeartbeatInfo * SOAP_FMAC4 soap_in___ns1__uploadCMAHeartbeatInfo(struct soap *soap, const char *tag, struct __ns1__uploadCMAHeartbeatInfo *a, const char *type)
{
	size_t soap_flag_ns1__uploadCMAHeartbeatInfo = 1;
	short soap_flag;
	a = (struct __ns1__uploadCMAHeartbeatInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__uploadCMAHeartbeatInfo, sizeof(struct __ns1__uploadCMAHeartbeatInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__uploadCMAHeartbeatInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__uploadCMAHeartbeatInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__uploadCMAHeartbeatInfo(soap, "ns1:uploadCMAHeartbeatInfo", &a->ns1__uploadCMAHeartbeatInfo, ""))
				{	soap_flag_ns1__uploadCMAHeartbeatInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__uploadCMAHeartbeatInfo(struct soap *soap, const struct __ns1__uploadCMAHeartbeatInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__uploadCMAHeartbeatInfo(soap, tag?tag:"-ns1:uploadCMAHeartbeatInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadCMAHeartbeatInfo * SOAP_FMAC4 soap_get___ns1__uploadCMAHeartbeatInfo(struct soap *soap, struct __ns1__uploadCMAHeartbeatInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__uploadCMAHeartbeatInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__uploadCMAHeartbeatInfo * SOAP_FMAC2 soap_instantiate___ns1__uploadCMAHeartbeatInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__uploadCMAHeartbeatInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__uploadCMAHeartbeatInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__uploadCMAHeartbeatInfo);
		if (size)
			*size = sizeof(struct __ns1__uploadCMAHeartbeatInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__uploadCMAHeartbeatInfo, n);
		if (size)
			*size = n * sizeof(struct __ns1__uploadCMAHeartbeatInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__uploadCMAHeartbeatInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__uploadCMAHeartbeatInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__uploadCMAHeartbeatInfo %p -> %p\n", q, p));
	*(struct __ns1__uploadCMAHeartbeatInfo*)p = *(struct __ns1__uploadCMAHeartbeatInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__uploadCMAData(struct soap *soap, struct __ns1__uploadCMAData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__uploadCMAData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__uploadCMAData(struct soap *soap, const struct __ns1__uploadCMAData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__uploadCMAData(soap, &a->ns1__uploadCMAData);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__uploadCMAData(struct soap *soap, const char *tag, int id, const struct __ns1__uploadCMAData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__uploadCMAData(soap, "ns1:uploadCMAData", -1, &a->ns1__uploadCMAData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadCMAData * SOAP_FMAC4 soap_in___ns1__uploadCMAData(struct soap *soap, const char *tag, struct __ns1__uploadCMAData *a, const char *type)
{
	size_t soap_flag_ns1__uploadCMAData = 1;
	short soap_flag;
	a = (struct __ns1__uploadCMAData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__uploadCMAData, sizeof(struct __ns1__uploadCMAData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__uploadCMAData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__uploadCMAData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__uploadCMAData(soap, "ns1:uploadCMAData", &a->ns1__uploadCMAData, ""))
				{	soap_flag_ns1__uploadCMAData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__uploadCMAData(struct soap *soap, const struct __ns1__uploadCMAData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__uploadCMAData(soap, tag?tag:"-ns1:uploadCMAData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadCMAData * SOAP_FMAC4 soap_get___ns1__uploadCMAData(struct soap *soap, struct __ns1__uploadCMAData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__uploadCMAData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__uploadCMAData * SOAP_FMAC2 soap_instantiate___ns1__uploadCMAData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__uploadCMAData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__uploadCMAData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__uploadCMAData);
		if (size)
			*size = sizeof(struct __ns1__uploadCMAData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__uploadCMAData, n);
		if (size)
			*size = n * sizeof(struct __ns1__uploadCMAData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__uploadCMAData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__uploadCMAData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__uploadCMAData %p -> %p\n", q, p));
	*(struct __ns1__uploadCMAData*)p = *(struct __ns1__uploadCMAData*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__upLoadCACDataResponse(struct soap *soap, _ns1__upLoadCACDataResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__upLoadCACDataResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__upLoadCACDataResponse(struct soap *soap, const char *tag, int id, _ns1__upLoadCACDataResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__upLoadCACDataResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__upLoadCACDataResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__upLoadCACDataResponse(struct soap *soap, const char *tag, _ns1__upLoadCACDataResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__upLoadCACDataResponse **)soap_malloc(soap, sizeof(_ns1__upLoadCACDataResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__upLoadCACDataResponse *)soap_instantiate__ns1__upLoadCACDataResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__upLoadCACDataResponse ** p = (_ns1__upLoadCACDataResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__upLoadCACDataResponse, sizeof(_ns1__upLoadCACDataResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__upLoadCACDataResponse(struct soap *soap, _ns1__upLoadCACDataResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__upLoadCACDataResponse);
	if (soap_out_PointerTo_ns1__upLoadCACDataResponse(soap, tag?tag:"ns1:upLoadCACDataResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__upLoadCACDataResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__upLoadCACDataResponse(struct soap *soap, _ns1__upLoadCACDataResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__upLoadCACDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__upLoadCACData(struct soap *soap, _ns1__upLoadCACData *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__upLoadCACData))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__upLoadCACData(struct soap *soap, const char *tag, int id, _ns1__upLoadCACData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__upLoadCACData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__upLoadCACData ** SOAP_FMAC4 soap_in_PointerTo_ns1__upLoadCACData(struct soap *soap, const char *tag, _ns1__upLoadCACData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__upLoadCACData **)soap_malloc(soap, sizeof(_ns1__upLoadCACData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__upLoadCACData *)soap_instantiate__ns1__upLoadCACData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__upLoadCACData ** p = (_ns1__upLoadCACData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__upLoadCACData, sizeof(_ns1__upLoadCACData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__upLoadCACData(struct soap *soap, _ns1__upLoadCACData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__upLoadCACData);
	if (soap_out_PointerTo_ns1__upLoadCACData(soap, tag?tag:"ns1:upLoadCACData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__upLoadCACData ** SOAP_FMAC4 soap_get_PointerTo_ns1__upLoadCACData(struct soap *soap, _ns1__upLoadCACData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__upLoadCACData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__uploadCMAHeartbeatInfoResponse(struct soap *soap, _ns1__uploadCMAHeartbeatInfoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__uploadCMAHeartbeatInfoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__uploadCMAHeartbeatInfoResponse(struct soap *soap, const char *tag, int id, _ns1__uploadCMAHeartbeatInfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__uploadCMAHeartbeatInfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__uploadCMAHeartbeatInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__uploadCMAHeartbeatInfoResponse(struct soap *soap, const char *tag, _ns1__uploadCMAHeartbeatInfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__uploadCMAHeartbeatInfoResponse **)soap_malloc(soap, sizeof(_ns1__uploadCMAHeartbeatInfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__uploadCMAHeartbeatInfoResponse *)soap_instantiate__ns1__uploadCMAHeartbeatInfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__uploadCMAHeartbeatInfoResponse ** p = (_ns1__uploadCMAHeartbeatInfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__uploadCMAHeartbeatInfoResponse, sizeof(_ns1__uploadCMAHeartbeatInfoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__uploadCMAHeartbeatInfoResponse(struct soap *soap, _ns1__uploadCMAHeartbeatInfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__uploadCMAHeartbeatInfoResponse);
	if (soap_out_PointerTo_ns1__uploadCMAHeartbeatInfoResponse(soap, tag?tag:"ns1:uploadCMAHeartbeatInfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__uploadCMAHeartbeatInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__uploadCMAHeartbeatInfoResponse(struct soap *soap, _ns1__uploadCMAHeartbeatInfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__uploadCMAHeartbeatInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__uploadCMAHeartbeatInfo(struct soap *soap, _ns1__uploadCMAHeartbeatInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__uploadCMAHeartbeatInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__uploadCMAHeartbeatInfo(struct soap *soap, const char *tag, int id, _ns1__uploadCMAHeartbeatInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__uploadCMAHeartbeatInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__uploadCMAHeartbeatInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__uploadCMAHeartbeatInfo(struct soap *soap, const char *tag, _ns1__uploadCMAHeartbeatInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__uploadCMAHeartbeatInfo **)soap_malloc(soap, sizeof(_ns1__uploadCMAHeartbeatInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__uploadCMAHeartbeatInfo *)soap_instantiate__ns1__uploadCMAHeartbeatInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__uploadCMAHeartbeatInfo ** p = (_ns1__uploadCMAHeartbeatInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__uploadCMAHeartbeatInfo, sizeof(_ns1__uploadCMAHeartbeatInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__uploadCMAHeartbeatInfo(struct soap *soap, _ns1__uploadCMAHeartbeatInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__uploadCMAHeartbeatInfo);
	if (soap_out_PointerTo_ns1__uploadCMAHeartbeatInfo(soap, tag?tag:"ns1:uploadCMAHeartbeatInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__uploadCMAHeartbeatInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__uploadCMAHeartbeatInfo(struct soap *soap, _ns1__uploadCMAHeartbeatInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__uploadCMAHeartbeatInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__uploadCMADataResponse(struct soap *soap, _ns1__uploadCMADataResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__uploadCMADataResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__uploadCMADataResponse(struct soap *soap, const char *tag, int id, _ns1__uploadCMADataResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__uploadCMADataResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__uploadCMADataResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__uploadCMADataResponse(struct soap *soap, const char *tag, _ns1__uploadCMADataResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__uploadCMADataResponse **)soap_malloc(soap, sizeof(_ns1__uploadCMADataResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__uploadCMADataResponse *)soap_instantiate__ns1__uploadCMADataResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__uploadCMADataResponse ** p = (_ns1__uploadCMADataResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__uploadCMADataResponse, sizeof(_ns1__uploadCMADataResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__uploadCMADataResponse(struct soap *soap, _ns1__uploadCMADataResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__uploadCMADataResponse);
	if (soap_out_PointerTo_ns1__uploadCMADataResponse(soap, tag?tag:"ns1:uploadCMADataResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__uploadCMADataResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__uploadCMADataResponse(struct soap *soap, _ns1__uploadCMADataResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__uploadCMADataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__uploadCMAData(struct soap *soap, _ns1__uploadCMAData *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__uploadCMAData))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__uploadCMAData(struct soap *soap, const char *tag, int id, _ns1__uploadCMAData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__uploadCMAData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__uploadCMAData ** SOAP_FMAC4 soap_in_PointerTo_ns1__uploadCMAData(struct soap *soap, const char *tag, _ns1__uploadCMAData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__uploadCMAData **)soap_malloc(soap, sizeof(_ns1__uploadCMAData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__uploadCMAData *)soap_instantiate__ns1__uploadCMAData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__uploadCMAData ** p = (_ns1__uploadCMAData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__uploadCMAData, sizeof(_ns1__uploadCMAData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__uploadCMAData(struct soap *soap, _ns1__uploadCMAData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__uploadCMAData);
	if (soap_out_PointerTo_ns1__uploadCMAData(soap, tag?tag:"ns1:uploadCMAData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__uploadCMAData ** SOAP_FMAC4 soap_get_PointerTo_ns1__uploadCMAData(struct soap *soap, _ns1__uploadCMAData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__uploadCMAData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
