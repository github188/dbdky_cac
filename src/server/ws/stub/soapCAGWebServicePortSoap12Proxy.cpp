/* soapCAGWebServicePortSoap12Proxy.cpp
   Generated by gSOAP 2.8.4 from CAGAccessService.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapCAGWebServicePortSoap12Proxy.h"

CAGWebServicePortSoap12Proxy::CAGWebServicePortSoap12Proxy()
{	CAGWebServicePortSoap12Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

CAGWebServicePortSoap12Proxy::CAGWebServicePortSoap12Proxy(const struct soap &_soap) : soap(_soap)
{ }

CAGWebServicePortSoap12Proxy::CAGWebServicePortSoap12Proxy(const char *url)
{	CAGWebServicePortSoap12Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

CAGWebServicePortSoap12Proxy::CAGWebServicePortSoap12Proxy(soap_mode iomode)
{	CAGWebServicePortSoap12Proxy_init(iomode, iomode);
}

CAGWebServicePortSoap12Proxy::CAGWebServicePortSoap12Proxy(const char *url, soap_mode iomode)
{	CAGWebServicePortSoap12Proxy_init(iomode, iomode);
	soap_endpoint = url;
}

CAGWebServicePortSoap12Proxy::CAGWebServicePortSoap12Proxy(soap_mode imode, soap_mode omode)
{	CAGWebServicePortSoap12Proxy_init(imode, omode);
}

CAGWebServicePortSoap12Proxy::~CAGWebServicePortSoap12Proxy()
{ }

void CAGWebServicePortSoap12Proxy::CAGWebServicePortSoap12Proxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns2", "http://tempuri.org/CAGWebServicePortSoap", NULL, NULL},
	{"ns1", "http://tempuri.org/", NULL, NULL},
	{"ns3", "http://tempuri.org/CAGWebServicePortSoap12", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void CAGWebServicePortSoap12Proxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void CAGWebServicePortSoap12Proxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *CAGWebServicePortSoap12Proxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *CAGWebServicePortSoap12Proxy::soap_fault()
{	return this->fault;
}

const char *CAGWebServicePortSoap12Proxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *CAGWebServicePortSoap12Proxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int CAGWebServicePortSoap12Proxy::soap_close_socket()
{	return soap_closesock(this);
}

int CAGWebServicePortSoap12Proxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void CAGWebServicePortSoap12Proxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void CAGWebServicePortSoap12Proxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *CAGWebServicePortSoap12Proxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int CAGWebServicePortSoap12Proxy::uploadCMAData(const char *endpoint, const char *soap_action, _ns1__uploadCMAData *ns1__uploadCMAData, _ns1__uploadCMADataResponse *ns1__uploadCMADataResponse)
{	struct soap *soap = this;
	struct __ns3__uploadCMAData soap_tmp___ns3__uploadCMAData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://172.168.1.233:8080/CAGService.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/uploadCMAData";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__uploadCMAData.ns1__uploadCMAData = ns1__uploadCMAData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__uploadCMAData(soap, &soap_tmp___ns3__uploadCMAData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__uploadCMAData(soap, &soap_tmp___ns3__uploadCMAData, "-ns3:uploadCMAData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__uploadCMAData(soap, &soap_tmp___ns3__uploadCMAData, "-ns3:uploadCMAData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__uploadCMADataResponse)
		return soap_closesock(soap);
	ns1__uploadCMADataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__uploadCMADataResponse->soap_get(soap, "ns1:uploadCMADataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CAGWebServicePortSoap12Proxy::uploadCMAHeartbeatInfo(const char *endpoint, const char *soap_action, _ns1__uploadCMAHeartbeatInfo *ns1__uploadCMAHeartbeatInfo, _ns1__uploadCMAHeartbeatInfoResponse *ns1__uploadCMAHeartbeatInfoResponse)
{	struct soap *soap = this;
	struct __ns3__uploadCMAHeartbeatInfo soap_tmp___ns3__uploadCMAHeartbeatInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://172.168.1.233:8080/CAGService.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/uploadCMAHeartbeatInfo";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__uploadCMAHeartbeatInfo.ns1__uploadCMAHeartbeatInfo = ns1__uploadCMAHeartbeatInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__uploadCMAHeartbeatInfo(soap, &soap_tmp___ns3__uploadCMAHeartbeatInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__uploadCMAHeartbeatInfo(soap, &soap_tmp___ns3__uploadCMAHeartbeatInfo, "-ns3:uploadCMAHeartbeatInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__uploadCMAHeartbeatInfo(soap, &soap_tmp___ns3__uploadCMAHeartbeatInfo, "-ns3:uploadCMAHeartbeatInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__uploadCMAHeartbeatInfoResponse)
		return soap_closesock(soap);
	ns1__uploadCMAHeartbeatInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__uploadCMAHeartbeatInfoResponse->soap_get(soap, "ns1:uploadCMAHeartbeatInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CAGWebServicePortSoap12Proxy::upLoadCACData(const char *endpoint, const char *soap_action, _ns1__upLoadCACData *ns1__upLoadCACData, _ns1__upLoadCACDataResponse *ns1__upLoadCACDataResponse)
{	struct soap *soap = this;
	struct __ns3__upLoadCACData soap_tmp___ns3__upLoadCACData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://172.168.1.233:8080/CAGService.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/upLoadCACData";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__upLoadCACData.ns1__upLoadCACData = ns1__upLoadCACData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__upLoadCACData(soap, &soap_tmp___ns3__upLoadCACData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__upLoadCACData(soap, &soap_tmp___ns3__upLoadCACData, "-ns3:upLoadCACData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__upLoadCACData(soap, &soap_tmp___ns3__upLoadCACData, "-ns3:upLoadCACData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__upLoadCACDataResponse)
		return soap_closesock(soap);
	ns1__upLoadCACDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__upLoadCACDataResponse->soap_get(soap, "ns1:upLoadCACDataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
