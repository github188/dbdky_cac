/* soapStub.h
   Generated by gSOAP 2.8.12 from CAGAccessService.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://info.nari-china.com/CAG"
#define SOAP_NAMESPACE_OF_ns1	"http://info.nari-china.com/CAG"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20812
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__uploadCACData
#define SOAP_TYPE__ns1__uploadCACData (8)
/* ns1:uploadCACData */
class SOAP_CMAC _ns1__uploadCACData
{
public:
	std::string *in0;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE__ns1__uploadCACData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__uploadCACData() { _ns1__uploadCACData::soap_default(NULL); }
	virtual ~_ns1__uploadCACData() { }
};
#endif

#ifndef SOAP_TYPE__ns1__uploadCACDataResponse
#define SOAP_TYPE__ns1__uploadCACDataResponse (9)
/* ns1:uploadCACDataResponse */
class SOAP_CMAC _ns1__uploadCACDataResponse
{
public:
	std::string *out;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE__ns1__uploadCACDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__uploadCACDataResponse() { _ns1__uploadCACDataResponse::soap_default(NULL); }
	virtual ~_ns1__uploadCACDataResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__downloadCACUpdateFile
#define SOAP_TYPE__ns1__downloadCACUpdateFile (10)
/* ns1:downloadCACUpdateFile */
class SOAP_CMAC _ns1__downloadCACUpdateFile
{
public:
	std::string *in0;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE__ns1__downloadCACUpdateFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__downloadCACUpdateFile() { _ns1__downloadCACUpdateFile::soap_default(NULL); }
	virtual ~_ns1__downloadCACUpdateFile() { }
};
#endif

#ifndef SOAP_TYPE__ns1__downloadCACUpdateFileResponse
#define SOAP_TYPE__ns1__downloadCACUpdateFileResponse (11)
/* ns1:downloadCACUpdateFileResponse */
class SOAP_CMAC _ns1__downloadCACUpdateFileResponse
{
public:
	std::string *out;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE__ns1__downloadCACUpdateFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__downloadCACUpdateFileResponse() { _ns1__downloadCACUpdateFileResponse::soap_default(NULL); }
	virtual ~_ns1__downloadCACUpdateFileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__downloadCACLatestVersion
#define SOAP_TYPE__ns1__downloadCACLatestVersion (12)
/* ns1:downloadCACLatestVersion */
class SOAP_CMAC _ns1__downloadCACLatestVersion
{
public:
	std::string *in0;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE__ns1__downloadCACLatestVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__downloadCACLatestVersion() { _ns1__downloadCACLatestVersion::soap_default(NULL); }
	virtual ~_ns1__downloadCACLatestVersion() { }
};
#endif

#ifndef SOAP_TYPE__ns1__downloadCACLatestVersionResponse
#define SOAP_TYPE__ns1__downloadCACLatestVersionResponse (13)
/* ns1:downloadCACLatestVersionResponse */
class SOAP_CMAC _ns1__downloadCACLatestVersionResponse
{
public:
	std::string *out;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE__ns1__downloadCACLatestVersionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__downloadCACLatestVersionResponse() { _ns1__downloadCACLatestVersionResponse::soap_default(NULL); }
	virtual ~_ns1__downloadCACLatestVersionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__uploadCACHeartbeatInfo
#define SOAP_TYPE__ns1__uploadCACHeartbeatInfo (14)
/* ns1:uploadCACHeartbeatInfo */
class SOAP_CMAC _ns1__uploadCACHeartbeatInfo
{
public:
	std::string *in0;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE__ns1__uploadCACHeartbeatInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__uploadCACHeartbeatInfo() { _ns1__uploadCACHeartbeatInfo::soap_default(NULL); }
	virtual ~_ns1__uploadCACHeartbeatInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse
#define SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse (15)
/* ns1:uploadCACHeartbeatInfoResponse */
class SOAP_CMAC _ns1__uploadCACHeartbeatInfoResponse
{
public:
	std::string *out;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__uploadCACHeartbeatInfoResponse() { _ns1__uploadCACHeartbeatInfoResponse::soap_default(NULL); }
	virtual ~_ns1__uploadCACHeartbeatInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__uploadCACConfig
#define SOAP_TYPE__ns1__uploadCACConfig (16)
/* ns1:uploadCACConfig */
class SOAP_CMAC _ns1__uploadCACConfig
{
public:
	std::string *in0;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE__ns1__uploadCACConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__uploadCACConfig() { _ns1__uploadCACConfig::soap_default(NULL); }
	virtual ~_ns1__uploadCACConfig() { }
};
#endif

#ifndef SOAP_TYPE__ns1__uploadCACConfigResponse
#define SOAP_TYPE__ns1__uploadCACConfigResponse (17)
/* ns1:uploadCACConfigResponse */
class SOAP_CMAC _ns1__uploadCACConfigResponse
{
public:
	std::string *out;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE__ns1__uploadCACConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__uploadCACConfigResponse() { _ns1__uploadCACConfigResponse::soap_default(NULL); }
	virtual ~_ns1__uploadCACConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__downloadCACHistoryVersion
#define SOAP_TYPE__ns1__downloadCACHistoryVersion (18)
/* ns1:downloadCACHistoryVersion */
class SOAP_CMAC _ns1__downloadCACHistoryVersion
{
public:
	std::string *in0;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE__ns1__downloadCACHistoryVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__downloadCACHistoryVersion() { _ns1__downloadCACHistoryVersion::soap_default(NULL); }
	virtual ~_ns1__downloadCACHistoryVersion() { }
};
#endif

#ifndef SOAP_TYPE__ns1__downloadCACHistoryVersionResponse
#define SOAP_TYPE__ns1__downloadCACHistoryVersionResponse (19)
/* ns1:downloadCACHistoryVersionResponse */
class SOAP_CMAC _ns1__downloadCACHistoryVersionResponse
{
public:
	std::string *out;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE__ns1__downloadCACHistoryVersionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__downloadCACHistoryVersionResponse() { _ns1__downloadCACHistoryVersionResponse::soap_default(NULL); }
	virtual ~_ns1__downloadCACHistoryVersionResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__uploadCACData
#define SOAP_TYPE___ns1__uploadCACData (26)
/* Operation wrapper: */
struct __ns1__uploadCACData
{
public:
	_ns1__uploadCACData *ns1__uploadCACData;	/* optional element of type ns1:uploadCACData */
public:
	int soap_type() const { return 26; } /* = unique id SOAP_TYPE___ns1__uploadCACData */
};
#endif

#ifndef SOAP_TYPE___ns1__downloadCACUpdateFile
#define SOAP_TYPE___ns1__downloadCACUpdateFile (30)
/* Operation wrapper: */
struct __ns1__downloadCACUpdateFile
{
public:
	_ns1__downloadCACUpdateFile *ns1__downloadCACUpdateFile;	/* optional element of type ns1:downloadCACUpdateFile */
public:
	int soap_type() const { return 30; } /* = unique id SOAP_TYPE___ns1__downloadCACUpdateFile */
};
#endif

#ifndef SOAP_TYPE___ns1__downloadCACLatestVersion
#define SOAP_TYPE___ns1__downloadCACLatestVersion (34)
/* Operation wrapper: */
struct __ns1__downloadCACLatestVersion
{
public:
	_ns1__downloadCACLatestVersion *ns1__downloadCACLatestVersion;	/* optional element of type ns1:downloadCACLatestVersion */
public:
	int soap_type() const { return 34; } /* = unique id SOAP_TYPE___ns1__downloadCACLatestVersion */
};
#endif

#ifndef SOAP_TYPE___ns1__uploadCACHeartbeatInfo
#define SOAP_TYPE___ns1__uploadCACHeartbeatInfo (38)
/* Operation wrapper: */
struct __ns1__uploadCACHeartbeatInfo
{
public:
	_ns1__uploadCACHeartbeatInfo *ns1__uploadCACHeartbeatInfo;	/* optional element of type ns1:uploadCACHeartbeatInfo */
public:
	int soap_type() const { return 38; } /* = unique id SOAP_TYPE___ns1__uploadCACHeartbeatInfo */
};
#endif

#ifndef SOAP_TYPE___ns1__uploadCACConfig
#define SOAP_TYPE___ns1__uploadCACConfig (42)
/* Operation wrapper: */
struct __ns1__uploadCACConfig
{
public:
	_ns1__uploadCACConfig *ns1__uploadCACConfig;	/* optional element of type ns1:uploadCACConfig */
public:
	int soap_type() const { return 42; } /* = unique id SOAP_TYPE___ns1__uploadCACConfig */
};
#endif

#ifndef SOAP_TYPE___ns1__downloadCACHistoryVersion
#define SOAP_TYPE___ns1__downloadCACHistoryVersion (46)
/* Operation wrapper: */
struct __ns1__downloadCACHistoryVersion
{
public:
	_ns1__downloadCACHistoryVersion *ns1__downloadCACHistoryVersion;	/* optional element of type ns1:downloadCACHistoryVersion */
public:
	int soap_type() const { return 46; } /* = unique id SOAP_TYPE___ns1__downloadCACHistoryVersion */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (47)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 47; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (48)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 48; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (50)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 50; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (53)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 53; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (54)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 54; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
