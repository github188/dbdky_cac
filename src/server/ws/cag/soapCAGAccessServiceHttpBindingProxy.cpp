/* soapCAGAccessServiceHttpBindingProxy.cpp
   Generated by gSOAP 2.8.12 from CAGAccessService.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapCAGAccessServiceHttpBindingProxy.h"

CAGAccessServiceHttpBindingProxy::CAGAccessServiceHttpBindingProxy()
{	CAGAccessServiceHttpBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

CAGAccessServiceHttpBindingProxy::CAGAccessServiceHttpBindingProxy(const struct soap &_soap) : soap(_soap)
{ }

CAGAccessServiceHttpBindingProxy::CAGAccessServiceHttpBindingProxy(const char *url)
{	CAGAccessServiceHttpBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

CAGAccessServiceHttpBindingProxy::CAGAccessServiceHttpBindingProxy(soap_mode iomode)
{	CAGAccessServiceHttpBindingProxy_init(iomode, iomode);
}

CAGAccessServiceHttpBindingProxy::CAGAccessServiceHttpBindingProxy(const char *url, soap_mode iomode)
{	CAGAccessServiceHttpBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

CAGAccessServiceHttpBindingProxy::CAGAccessServiceHttpBindingProxy(soap_mode imode, soap_mode omode)
{	CAGAccessServiceHttpBindingProxy_init(imode, omode);
}

CAGAccessServiceHttpBindingProxy::~CAGAccessServiceHttpBindingProxy()
{ }

void CAGAccessServiceHttpBindingProxy::CAGAccessServiceHttpBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://info.nari-china.com/CAG", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void CAGAccessServiceHttpBindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void CAGAccessServiceHttpBindingProxy::reset()
{	destroy();
	soap_done(this);
	soap_init(this);
	CAGAccessServiceHttpBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void CAGAccessServiceHttpBindingProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *CAGAccessServiceHttpBindingProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *CAGAccessServiceHttpBindingProxy::soap_fault()
{	return this->fault;
}

const char *CAGAccessServiceHttpBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *CAGAccessServiceHttpBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int CAGAccessServiceHttpBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

int CAGAccessServiceHttpBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void CAGAccessServiceHttpBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void CAGAccessServiceHttpBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *CAGAccessServiceHttpBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int CAGAccessServiceHttpBindingProxy::uploadCACData(const char *endpoint, const char *soap_action, _ns1__uploadCACData *ns1__uploadCACData, _ns1__uploadCACDataResponse *ns1__uploadCACDataResponse)
{	struct soap *soap = this;
	struct __ns1__uploadCACData soap_tmp___ns1__uploadCACData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.162.211.23/TRANSFCAG/services/CAGAccessService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__uploadCACData.ns1__uploadCACData = ns1__uploadCACData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__uploadCACData(soap, &soap_tmp___ns1__uploadCACData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__uploadCACData(soap, &soap_tmp___ns1__uploadCACData, "-ns1:uploadCACData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__uploadCACData(soap, &soap_tmp___ns1__uploadCACData, "-ns1:uploadCACData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__uploadCACDataResponse)
		return soap_closesock(soap);
	ns1__uploadCACDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__uploadCACDataResponse->soap_get(soap, "ns1:uploadCACDataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CAGAccessServiceHttpBindingProxy::downloadCACUpdateFile(const char *endpoint, const char *soap_action, _ns1__downloadCACUpdateFile *ns1__downloadCACUpdateFile, _ns1__downloadCACUpdateFileResponse *ns1__downloadCACUpdateFileResponse)
{	struct soap *soap = this;
	struct __ns1__downloadCACUpdateFile soap_tmp___ns1__downloadCACUpdateFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.162.211.23/TRANSFCAG/services/CAGAccessService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__downloadCACUpdateFile.ns1__downloadCACUpdateFile = ns1__downloadCACUpdateFile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__downloadCACUpdateFile(soap, &soap_tmp___ns1__downloadCACUpdateFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__downloadCACUpdateFile(soap, &soap_tmp___ns1__downloadCACUpdateFile, "-ns1:downloadCACUpdateFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__downloadCACUpdateFile(soap, &soap_tmp___ns1__downloadCACUpdateFile, "-ns1:downloadCACUpdateFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__downloadCACUpdateFileResponse)
		return soap_closesock(soap);
	ns1__downloadCACUpdateFileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__downloadCACUpdateFileResponse->soap_get(soap, "ns1:downloadCACUpdateFileResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CAGAccessServiceHttpBindingProxy::downloadCACLatestVersion(const char *endpoint, const char *soap_action, _ns1__downloadCACLatestVersion *ns1__downloadCACLatestVersion, _ns1__downloadCACLatestVersionResponse *ns1__downloadCACLatestVersionResponse)
{	struct soap *soap = this;
	struct __ns1__downloadCACLatestVersion soap_tmp___ns1__downloadCACLatestVersion;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.162.211.23/TRANSFCAG/services/CAGAccessService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__downloadCACLatestVersion.ns1__downloadCACLatestVersion = ns1__downloadCACLatestVersion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__downloadCACLatestVersion(soap, &soap_tmp___ns1__downloadCACLatestVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__downloadCACLatestVersion(soap, &soap_tmp___ns1__downloadCACLatestVersion, "-ns1:downloadCACLatestVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__downloadCACLatestVersion(soap, &soap_tmp___ns1__downloadCACLatestVersion, "-ns1:downloadCACLatestVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__downloadCACLatestVersionResponse)
		return soap_closesock(soap);
	ns1__downloadCACLatestVersionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__downloadCACLatestVersionResponse->soap_get(soap, "ns1:downloadCACLatestVersionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CAGAccessServiceHttpBindingProxy::uploadCACHeartbeatInfo(const char *endpoint, const char *soap_action, _ns1__uploadCACHeartbeatInfo *ns1__uploadCACHeartbeatInfo, _ns1__uploadCACHeartbeatInfoResponse *ns1__uploadCACHeartbeatInfoResponse)
{	struct soap *soap = this;
	struct __ns1__uploadCACHeartbeatInfo soap_tmp___ns1__uploadCACHeartbeatInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.162.211.23/TRANSFCAG/services/CAGAccessService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__uploadCACHeartbeatInfo.ns1__uploadCACHeartbeatInfo = ns1__uploadCACHeartbeatInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__uploadCACHeartbeatInfo(soap, &soap_tmp___ns1__uploadCACHeartbeatInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__uploadCACHeartbeatInfo(soap, &soap_tmp___ns1__uploadCACHeartbeatInfo, "-ns1:uploadCACHeartbeatInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__uploadCACHeartbeatInfo(soap, &soap_tmp___ns1__uploadCACHeartbeatInfo, "-ns1:uploadCACHeartbeatInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__uploadCACHeartbeatInfoResponse)
		return soap_closesock(soap);
	ns1__uploadCACHeartbeatInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__uploadCACHeartbeatInfoResponse->soap_get(soap, "ns1:uploadCACHeartbeatInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CAGAccessServiceHttpBindingProxy::uploadCACConfig(const char *endpoint, const char *soap_action, _ns1__uploadCACConfig *ns1__uploadCACConfig, _ns1__uploadCACConfigResponse *ns1__uploadCACConfigResponse)
{	struct soap *soap = this;
	struct __ns1__uploadCACConfig soap_tmp___ns1__uploadCACConfig;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.162.211.23/TRANSFCAG/services/CAGAccessService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__uploadCACConfig.ns1__uploadCACConfig = ns1__uploadCACConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__uploadCACConfig(soap, &soap_tmp___ns1__uploadCACConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__uploadCACConfig(soap, &soap_tmp___ns1__uploadCACConfig, "-ns1:uploadCACConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__uploadCACConfig(soap, &soap_tmp___ns1__uploadCACConfig, "-ns1:uploadCACConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__uploadCACConfigResponse)
		return soap_closesock(soap);
	ns1__uploadCACConfigResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__uploadCACConfigResponse->soap_get(soap, "ns1:uploadCACConfigResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CAGAccessServiceHttpBindingProxy::downloadCACHistoryVersion(const char *endpoint, const char *soap_action, _ns1__downloadCACHistoryVersion *ns1__downloadCACHistoryVersion, _ns1__downloadCACHistoryVersionResponse *ns1__downloadCACHistoryVersionResponse)
{	struct soap *soap = this;
	struct __ns1__downloadCACHistoryVersion soap_tmp___ns1__downloadCACHistoryVersion;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.162.211.23/TRANSFCAG/services/CAGAccessService";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__downloadCACHistoryVersion.ns1__downloadCACHistoryVersion = ns1__downloadCACHistoryVersion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__downloadCACHistoryVersion(soap, &soap_tmp___ns1__downloadCACHistoryVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__downloadCACHistoryVersion(soap, &soap_tmp___ns1__downloadCACHistoryVersion, "-ns1:downloadCACHistoryVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__downloadCACHistoryVersion(soap, &soap_tmp___ns1__downloadCACHistoryVersion, "-ns1:downloadCACHistoryVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__downloadCACHistoryVersionResponse)
		return soap_closesock(soap);
	ns1__downloadCACHistoryVersionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__downloadCACHistoryVersionResponse->soap_get(soap, "ns1:downloadCACHistoryVersionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
