/* soapC.cpp
   Generated by gSOAP 2.8.12 from CAGAccessService.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.12 2013-09-10 01:05:00 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__downloadCACHistoryVersionResponse:
		return soap_in_PointerTo_ns1__downloadCACHistoryVersionResponse(soap, NULL, NULL, "ns1:downloadCACHistoryVersionResponse");
	case SOAP_TYPE_PointerTo_ns1__downloadCACHistoryVersion:
		return soap_in_PointerTo_ns1__downloadCACHistoryVersion(soap, NULL, NULL, "ns1:downloadCACHistoryVersion");
	case SOAP_TYPE_PointerTo_ns1__uploadCACConfigResponse:
		return soap_in_PointerTo_ns1__uploadCACConfigResponse(soap, NULL, NULL, "ns1:uploadCACConfigResponse");
	case SOAP_TYPE_PointerTo_ns1__uploadCACConfig:
		return soap_in_PointerTo_ns1__uploadCACConfig(soap, NULL, NULL, "ns1:uploadCACConfig");
	case SOAP_TYPE_PointerTo_ns1__uploadCACHeartbeatInfoResponse:
		return soap_in_PointerTo_ns1__uploadCACHeartbeatInfoResponse(soap, NULL, NULL, "ns1:uploadCACHeartbeatInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__uploadCACHeartbeatInfo:
		return soap_in_PointerTo_ns1__uploadCACHeartbeatInfo(soap, NULL, NULL, "ns1:uploadCACHeartbeatInfo");
	case SOAP_TYPE_PointerTo_ns1__downloadCACLatestVersionResponse:
		return soap_in_PointerTo_ns1__downloadCACLatestVersionResponse(soap, NULL, NULL, "ns1:downloadCACLatestVersionResponse");
	case SOAP_TYPE_PointerTo_ns1__downloadCACLatestVersion:
		return soap_in_PointerTo_ns1__downloadCACLatestVersion(soap, NULL, NULL, "ns1:downloadCACLatestVersion");
	case SOAP_TYPE_PointerTo_ns1__downloadCACUpdateFileResponse:
		return soap_in_PointerTo_ns1__downloadCACUpdateFileResponse(soap, NULL, NULL, "ns1:downloadCACUpdateFileResponse");
	case SOAP_TYPE_PointerTo_ns1__downloadCACUpdateFile:
		return soap_in_PointerTo_ns1__downloadCACUpdateFile(soap, NULL, NULL, "ns1:downloadCACUpdateFile");
	case SOAP_TYPE_PointerTo_ns1__uploadCACDataResponse:
		return soap_in_PointerTo_ns1__uploadCACDataResponse(soap, NULL, NULL, "ns1:uploadCACDataResponse");
	case SOAP_TYPE_PointerTo_ns1__uploadCACData:
		return soap_in_PointerTo_ns1__uploadCACData(soap, NULL, NULL, "ns1:uploadCACData");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:downloadCACHistoryVersionResponse"))
		{	*type = SOAP_TYPE__ns1__downloadCACHistoryVersionResponse;
			return soap_in__ns1__downloadCACHistoryVersionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:downloadCACHistoryVersion"))
		{	*type = SOAP_TYPE__ns1__downloadCACHistoryVersion;
			return soap_in__ns1__downloadCACHistoryVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:uploadCACConfigResponse"))
		{	*type = SOAP_TYPE__ns1__uploadCACConfigResponse;
			return soap_in__ns1__uploadCACConfigResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:uploadCACConfig"))
		{	*type = SOAP_TYPE__ns1__uploadCACConfig;
			return soap_in__ns1__uploadCACConfig(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:uploadCACHeartbeatInfoResponse"))
		{	*type = SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse;
			return soap_in__ns1__uploadCACHeartbeatInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:uploadCACHeartbeatInfo"))
		{	*type = SOAP_TYPE__ns1__uploadCACHeartbeatInfo;
			return soap_in__ns1__uploadCACHeartbeatInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:downloadCACLatestVersionResponse"))
		{	*type = SOAP_TYPE__ns1__downloadCACLatestVersionResponse;
			return soap_in__ns1__downloadCACLatestVersionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:downloadCACLatestVersion"))
		{	*type = SOAP_TYPE__ns1__downloadCACLatestVersion;
			return soap_in__ns1__downloadCACLatestVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:downloadCACUpdateFileResponse"))
		{	*type = SOAP_TYPE__ns1__downloadCACUpdateFileResponse;
			return soap_in__ns1__downloadCACUpdateFileResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:downloadCACUpdateFile"))
		{	*type = SOAP_TYPE__ns1__downloadCACUpdateFile;
			return soap_in__ns1__downloadCACUpdateFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:uploadCACDataResponse"))
		{	*type = SOAP_TYPE__ns1__uploadCACDataResponse;
			return soap_in__ns1__uploadCACDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:uploadCACData"))
		{	*type = SOAP_TYPE__ns1__uploadCACData;
			return soap_in__ns1__uploadCACData(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__downloadCACHistoryVersionResponse:
		return ((_ns1__downloadCACHistoryVersionResponse *)ptr)->soap_out(soap, "ns1:downloadCACHistoryVersionResponse", id, NULL);
	case SOAP_TYPE__ns1__downloadCACHistoryVersion:
		return ((_ns1__downloadCACHistoryVersion *)ptr)->soap_out(soap, "ns1:downloadCACHistoryVersion", id, NULL);
	case SOAP_TYPE__ns1__uploadCACConfigResponse:
		return ((_ns1__uploadCACConfigResponse *)ptr)->soap_out(soap, "ns1:uploadCACConfigResponse", id, NULL);
	case SOAP_TYPE__ns1__uploadCACConfig:
		return ((_ns1__uploadCACConfig *)ptr)->soap_out(soap, "ns1:uploadCACConfig", id, NULL);
	case SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse:
		return ((_ns1__uploadCACHeartbeatInfoResponse *)ptr)->soap_out(soap, "ns1:uploadCACHeartbeatInfoResponse", id, NULL);
	case SOAP_TYPE__ns1__uploadCACHeartbeatInfo:
		return ((_ns1__uploadCACHeartbeatInfo *)ptr)->soap_out(soap, "ns1:uploadCACHeartbeatInfo", id, NULL);
	case SOAP_TYPE__ns1__downloadCACLatestVersionResponse:
		return ((_ns1__downloadCACLatestVersionResponse *)ptr)->soap_out(soap, "ns1:downloadCACLatestVersionResponse", id, NULL);
	case SOAP_TYPE__ns1__downloadCACLatestVersion:
		return ((_ns1__downloadCACLatestVersion *)ptr)->soap_out(soap, "ns1:downloadCACLatestVersion", id, NULL);
	case SOAP_TYPE__ns1__downloadCACUpdateFileResponse:
		return ((_ns1__downloadCACUpdateFileResponse *)ptr)->soap_out(soap, "ns1:downloadCACUpdateFileResponse", id, NULL);
	case SOAP_TYPE__ns1__downloadCACUpdateFile:
		return ((_ns1__downloadCACUpdateFile *)ptr)->soap_out(soap, "ns1:downloadCACUpdateFile", id, NULL);
	case SOAP_TYPE__ns1__uploadCACDataResponse:
		return ((_ns1__uploadCACDataResponse *)ptr)->soap_out(soap, "ns1:uploadCACDataResponse", id, NULL);
	case SOAP_TYPE__ns1__uploadCACData:
		return ((_ns1__uploadCACData *)ptr)->soap_out(soap, "ns1:uploadCACData", id, NULL);
	case SOAP_TYPE_PointerTo_ns1__downloadCACHistoryVersionResponse:
		return soap_out_PointerTo_ns1__downloadCACHistoryVersionResponse(soap, tag, id, (_ns1__downloadCACHistoryVersionResponse *const*)ptr, "ns1:downloadCACHistoryVersionResponse");
	case SOAP_TYPE_PointerTo_ns1__downloadCACHistoryVersion:
		return soap_out_PointerTo_ns1__downloadCACHistoryVersion(soap, tag, id, (_ns1__downloadCACHistoryVersion *const*)ptr, "ns1:downloadCACHistoryVersion");
	case SOAP_TYPE_PointerTo_ns1__uploadCACConfigResponse:
		return soap_out_PointerTo_ns1__uploadCACConfigResponse(soap, tag, id, (_ns1__uploadCACConfigResponse *const*)ptr, "ns1:uploadCACConfigResponse");
	case SOAP_TYPE_PointerTo_ns1__uploadCACConfig:
		return soap_out_PointerTo_ns1__uploadCACConfig(soap, tag, id, (_ns1__uploadCACConfig *const*)ptr, "ns1:uploadCACConfig");
	case SOAP_TYPE_PointerTo_ns1__uploadCACHeartbeatInfoResponse:
		return soap_out_PointerTo_ns1__uploadCACHeartbeatInfoResponse(soap, tag, id, (_ns1__uploadCACHeartbeatInfoResponse *const*)ptr, "ns1:uploadCACHeartbeatInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__uploadCACHeartbeatInfo:
		return soap_out_PointerTo_ns1__uploadCACHeartbeatInfo(soap, tag, id, (_ns1__uploadCACHeartbeatInfo *const*)ptr, "ns1:uploadCACHeartbeatInfo");
	case SOAP_TYPE_PointerTo_ns1__downloadCACLatestVersionResponse:
		return soap_out_PointerTo_ns1__downloadCACLatestVersionResponse(soap, tag, id, (_ns1__downloadCACLatestVersionResponse *const*)ptr, "ns1:downloadCACLatestVersionResponse");
	case SOAP_TYPE_PointerTo_ns1__downloadCACLatestVersion:
		return soap_out_PointerTo_ns1__downloadCACLatestVersion(soap, tag, id, (_ns1__downloadCACLatestVersion *const*)ptr, "ns1:downloadCACLatestVersion");
	case SOAP_TYPE_PointerTo_ns1__downloadCACUpdateFileResponse:
		return soap_out_PointerTo_ns1__downloadCACUpdateFileResponse(soap, tag, id, (_ns1__downloadCACUpdateFileResponse *const*)ptr, "ns1:downloadCACUpdateFileResponse");
	case SOAP_TYPE_PointerTo_ns1__downloadCACUpdateFile:
		return soap_out_PointerTo_ns1__downloadCACUpdateFile(soap, tag, id, (_ns1__downloadCACUpdateFile *const*)ptr, "ns1:downloadCACUpdateFile");
	case SOAP_TYPE_PointerTo_ns1__uploadCACDataResponse:
		return soap_out_PointerTo_ns1__uploadCACDataResponse(soap, tag, id, (_ns1__uploadCACDataResponse *const*)ptr, "ns1:uploadCACDataResponse");
	case SOAP_TYPE_PointerTo_ns1__uploadCACData:
		return soap_out_PointerTo_ns1__uploadCACData(soap, tag, id, (_ns1__uploadCACData *const*)ptr, "ns1:uploadCACData");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__downloadCACHistoryVersionResponse:
		((_ns1__downloadCACHistoryVersionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__downloadCACHistoryVersion:
		((_ns1__downloadCACHistoryVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__uploadCACConfigResponse:
		((_ns1__uploadCACConfigResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__uploadCACConfig:
		((_ns1__uploadCACConfig *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse:
		((_ns1__uploadCACHeartbeatInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__uploadCACHeartbeatInfo:
		((_ns1__uploadCACHeartbeatInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__downloadCACLatestVersionResponse:
		((_ns1__downloadCACLatestVersionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__downloadCACLatestVersion:
		((_ns1__downloadCACLatestVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__downloadCACUpdateFileResponse:
		((_ns1__downloadCACUpdateFileResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__downloadCACUpdateFile:
		((_ns1__downloadCACUpdateFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__uploadCACDataResponse:
		((_ns1__uploadCACDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__uploadCACData:
		((_ns1__uploadCACData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__downloadCACHistoryVersion:
		soap_serialize___ns1__downloadCACHistoryVersion(soap, (const struct __ns1__downloadCACHistoryVersion *)ptr);
		break;
	case SOAP_TYPE___ns1__uploadCACConfig:
		soap_serialize___ns1__uploadCACConfig(soap, (const struct __ns1__uploadCACConfig *)ptr);
		break;
	case SOAP_TYPE___ns1__uploadCACHeartbeatInfo:
		soap_serialize___ns1__uploadCACHeartbeatInfo(soap, (const struct __ns1__uploadCACHeartbeatInfo *)ptr);
		break;
	case SOAP_TYPE___ns1__downloadCACLatestVersion:
		soap_serialize___ns1__downloadCACLatestVersion(soap, (const struct __ns1__downloadCACLatestVersion *)ptr);
		break;
	case SOAP_TYPE___ns1__downloadCACUpdateFile:
		soap_serialize___ns1__downloadCACUpdateFile(soap, (const struct __ns1__downloadCACUpdateFile *)ptr);
		break;
	case SOAP_TYPE___ns1__uploadCACData:
		soap_serialize___ns1__uploadCACData(soap, (const struct __ns1__uploadCACData *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__downloadCACHistoryVersionResponse:
		soap_serialize_PointerTo_ns1__downloadCACHistoryVersionResponse(soap, (_ns1__downloadCACHistoryVersionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__downloadCACHistoryVersion:
		soap_serialize_PointerTo_ns1__downloadCACHistoryVersion(soap, (_ns1__downloadCACHistoryVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__uploadCACConfigResponse:
		soap_serialize_PointerTo_ns1__uploadCACConfigResponse(soap, (_ns1__uploadCACConfigResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__uploadCACConfig:
		soap_serialize_PointerTo_ns1__uploadCACConfig(soap, (_ns1__uploadCACConfig *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__uploadCACHeartbeatInfoResponse:
		soap_serialize_PointerTo_ns1__uploadCACHeartbeatInfoResponse(soap, (_ns1__uploadCACHeartbeatInfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__uploadCACHeartbeatInfo:
		soap_serialize_PointerTo_ns1__uploadCACHeartbeatInfo(soap, (_ns1__uploadCACHeartbeatInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__downloadCACLatestVersionResponse:
		soap_serialize_PointerTo_ns1__downloadCACLatestVersionResponse(soap, (_ns1__downloadCACLatestVersionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__downloadCACLatestVersion:
		soap_serialize_PointerTo_ns1__downloadCACLatestVersion(soap, (_ns1__downloadCACLatestVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__downloadCACUpdateFileResponse:
		soap_serialize_PointerTo_ns1__downloadCACUpdateFileResponse(soap, (_ns1__downloadCACUpdateFileResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__downloadCACUpdateFile:
		soap_serialize_PointerTo_ns1__downloadCACUpdateFile(soap, (_ns1__downloadCACUpdateFile *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__uploadCACDataResponse:
		soap_serialize_PointerTo_ns1__uploadCACDataResponse(soap, (_ns1__uploadCACDataResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__uploadCACData:
		soap_serialize_PointerTo_ns1__uploadCACData(soap, (_ns1__uploadCACData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__uploadCACData:
		return (void*)soap_instantiate__ns1__uploadCACData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__uploadCACDataResponse:
		return (void*)soap_instantiate__ns1__uploadCACDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__downloadCACUpdateFile:
		return (void*)soap_instantiate__ns1__downloadCACUpdateFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__downloadCACUpdateFileResponse:
		return (void*)soap_instantiate__ns1__downloadCACUpdateFileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__downloadCACLatestVersion:
		return (void*)soap_instantiate__ns1__downloadCACLatestVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__downloadCACLatestVersionResponse:
		return (void*)soap_instantiate__ns1__downloadCACLatestVersionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__uploadCACHeartbeatInfo:
		return (void*)soap_instantiate__ns1__uploadCACHeartbeatInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse:
		return (void*)soap_instantiate__ns1__uploadCACHeartbeatInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__uploadCACConfig:
		return (void*)soap_instantiate__ns1__uploadCACConfig(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__uploadCACConfigResponse:
		return (void*)soap_instantiate__ns1__uploadCACConfigResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__downloadCACHistoryVersion:
		return (void*)soap_instantiate__ns1__downloadCACHistoryVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__downloadCACHistoryVersionResponse:
		return (void*)soap_instantiate__ns1__downloadCACHistoryVersionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__uploadCACData:
		return (void*)soap_instantiate___ns1__uploadCACData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__downloadCACUpdateFile:
		return (void*)soap_instantiate___ns1__downloadCACUpdateFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__downloadCACLatestVersion:
		return (void*)soap_instantiate___ns1__downloadCACLatestVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__uploadCACHeartbeatInfo:
		return (void*)soap_instantiate___ns1__uploadCACHeartbeatInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__uploadCACConfig:
		return (void*)soap_instantiate___ns1__uploadCACConfig(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__downloadCACHistoryVersion:
		return (void*)soap_instantiate___ns1__downloadCACHistoryVersion(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE__ns1__uploadCACData:
		if (p->size < 0)
			SOAP_DELETE((_ns1__uploadCACData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__uploadCACData*)p->ptr);
		break;
	case SOAP_TYPE__ns1__uploadCACDataResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__uploadCACDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__uploadCACDataResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__downloadCACUpdateFile:
		if (p->size < 0)
			SOAP_DELETE((_ns1__downloadCACUpdateFile*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__downloadCACUpdateFile*)p->ptr);
		break;
	case SOAP_TYPE__ns1__downloadCACUpdateFileResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__downloadCACUpdateFileResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__downloadCACUpdateFileResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__downloadCACLatestVersion:
		if (p->size < 0)
			SOAP_DELETE((_ns1__downloadCACLatestVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__downloadCACLatestVersion*)p->ptr);
		break;
	case SOAP_TYPE__ns1__downloadCACLatestVersionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__downloadCACLatestVersionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__downloadCACLatestVersionResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__uploadCACHeartbeatInfo:
		if (p->size < 0)
			SOAP_DELETE((_ns1__uploadCACHeartbeatInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__uploadCACHeartbeatInfo*)p->ptr);
		break;
	case SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__uploadCACHeartbeatInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__uploadCACHeartbeatInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__uploadCACConfig:
		if (p->size < 0)
			SOAP_DELETE((_ns1__uploadCACConfig*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__uploadCACConfig*)p->ptr);
		break;
	case SOAP_TYPE__ns1__uploadCACConfigResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__uploadCACConfigResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__uploadCACConfigResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__downloadCACHistoryVersion:
		if (p->size < 0)
			SOAP_DELETE((_ns1__downloadCACHistoryVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__downloadCACHistoryVersion*)p->ptr);
		break;
	case SOAP_TYPE__ns1__downloadCACHistoryVersionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__downloadCACHistoryVersionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__downloadCACHistoryVersionResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__uploadCACData:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__uploadCACData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__uploadCACData*)p->ptr);
		break;
	case SOAP_TYPE___ns1__downloadCACUpdateFile:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__downloadCACUpdateFile*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__downloadCACUpdateFile*)p->ptr);
		break;
	case SOAP_TYPE___ns1__downloadCACLatestVersion:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__downloadCACLatestVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__downloadCACLatestVersion*)p->ptr);
		break;
	case SOAP_TYPE___ns1__uploadCACHeartbeatInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__uploadCACHeartbeatInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__uploadCACHeartbeatInfo*)p->ptr);
		break;
	case SOAP_TYPE___ns1__uploadCACConfig:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__uploadCACConfig*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__uploadCACConfig*)p->ptr);
		break;
	case SOAP_TYPE___ns1__downloadCACHistoryVersion:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__downloadCACHistoryVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__downloadCACHistoryVersion*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _ns1__downloadCACHistoryVersionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__downloadCACHistoryVersionResponse::out = NULL;
	/* transient soap skipped */
}

void _ns1__downloadCACHistoryVersionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__downloadCACHistoryVersionResponse::out);
	/* transient soap skipped */
}

int _ns1__downloadCACHistoryVersionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__downloadCACHistoryVersionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__downloadCACHistoryVersionResponse(struct soap *soap, const char *tag, int id, const _ns1__downloadCACHistoryVersionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__downloadCACHistoryVersionResponse), type))
		return soap->error;
	if (a->_ns1__downloadCACHistoryVersionResponse::out)
	{	if (soap_out_PointerTostd__string(soap, "out", -1, &a->_ns1__downloadCACHistoryVersionResponse::out, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "out"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__downloadCACHistoryVersionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__downloadCACHistoryVersionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__downloadCACHistoryVersionResponse * SOAP_FMAC4 soap_in__ns1__downloadCACHistoryVersionResponse(struct soap *soap, const char *tag, _ns1__downloadCACHistoryVersionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__downloadCACHistoryVersionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__downloadCACHistoryVersionResponse, sizeof(_ns1__downloadCACHistoryVersionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__downloadCACHistoryVersionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__downloadCACHistoryVersionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_out1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "out", &(a->_ns1__downloadCACHistoryVersionResponse::out), "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__downloadCACHistoryVersionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__downloadCACHistoryVersionResponse, 0, sizeof(_ns1__downloadCACHistoryVersionResponse), 0, soap_copy__ns1__downloadCACHistoryVersionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__downloadCACHistoryVersionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__downloadCACHistoryVersionResponse);
	if (this->soap_out(soap, tag?tag:"ns1:downloadCACHistoryVersionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__downloadCACHistoryVersionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__downloadCACHistoryVersionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__downloadCACHistoryVersionResponse * SOAP_FMAC4 soap_get__ns1__downloadCACHistoryVersionResponse(struct soap *soap, _ns1__downloadCACHistoryVersionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__downloadCACHistoryVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__downloadCACHistoryVersionResponse * SOAP_FMAC2 soap_instantiate__ns1__downloadCACHistoryVersionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__downloadCACHistoryVersionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__downloadCACHistoryVersionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__downloadCACHistoryVersionResponse);
		if (size)
			*size = sizeof(_ns1__downloadCACHistoryVersionResponse);
		((_ns1__downloadCACHistoryVersionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__downloadCACHistoryVersionResponse, n);
		if (size)
			*size = n * sizeof(_ns1__downloadCACHistoryVersionResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__downloadCACHistoryVersionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__downloadCACHistoryVersionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__downloadCACHistoryVersionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__downloadCACHistoryVersionResponse %p -> %p\n", q, p));
	*(_ns1__downloadCACHistoryVersionResponse*)p = *(_ns1__downloadCACHistoryVersionResponse*)q;
}

void _ns1__downloadCACHistoryVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__downloadCACHistoryVersion::in0 = NULL;
	/* transient soap skipped */
}

void _ns1__downloadCACHistoryVersion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__downloadCACHistoryVersion::in0);
	/* transient soap skipped */
}

int _ns1__downloadCACHistoryVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__downloadCACHistoryVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__downloadCACHistoryVersion(struct soap *soap, const char *tag, int id, const _ns1__downloadCACHistoryVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__downloadCACHistoryVersion), type))
		return soap->error;
	if (a->_ns1__downloadCACHistoryVersion::in0)
	{	if (soap_out_PointerTostd__string(soap, "in0", -1, &a->_ns1__downloadCACHistoryVersion::in0, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "in0"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__downloadCACHistoryVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__downloadCACHistoryVersion(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__downloadCACHistoryVersion * SOAP_FMAC4 soap_in__ns1__downloadCACHistoryVersion(struct soap *soap, const char *tag, _ns1__downloadCACHistoryVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__downloadCACHistoryVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__downloadCACHistoryVersion, sizeof(_ns1__downloadCACHistoryVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__downloadCACHistoryVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__downloadCACHistoryVersion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_in01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "in0", &(a->_ns1__downloadCACHistoryVersion::in0), "xsd:string"))
				{	soap_flag_in01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__downloadCACHistoryVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__downloadCACHistoryVersion, 0, sizeof(_ns1__downloadCACHistoryVersion), 0, soap_copy__ns1__downloadCACHistoryVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in01 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__downloadCACHistoryVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__downloadCACHistoryVersion);
	if (this->soap_out(soap, tag?tag:"ns1:downloadCACHistoryVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__downloadCACHistoryVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__downloadCACHistoryVersion(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__downloadCACHistoryVersion * SOAP_FMAC4 soap_get__ns1__downloadCACHistoryVersion(struct soap *soap, _ns1__downloadCACHistoryVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__downloadCACHistoryVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__downloadCACHistoryVersion * SOAP_FMAC2 soap_instantiate__ns1__downloadCACHistoryVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__downloadCACHistoryVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__downloadCACHistoryVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__downloadCACHistoryVersion);
		if (size)
			*size = sizeof(_ns1__downloadCACHistoryVersion);
		((_ns1__downloadCACHistoryVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__downloadCACHistoryVersion, n);
		if (size)
			*size = n * sizeof(_ns1__downloadCACHistoryVersion);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__downloadCACHistoryVersion*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__downloadCACHistoryVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__downloadCACHistoryVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__downloadCACHistoryVersion %p -> %p\n", q, p));
	*(_ns1__downloadCACHistoryVersion*)p = *(_ns1__downloadCACHistoryVersion*)q;
}

void _ns1__uploadCACConfigResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__uploadCACConfigResponse::out = NULL;
	/* transient soap skipped */
}

void _ns1__uploadCACConfigResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__uploadCACConfigResponse::out);
	/* transient soap skipped */
}

int _ns1__uploadCACConfigResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__uploadCACConfigResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadCACConfigResponse(struct soap *soap, const char *tag, int id, const _ns1__uploadCACConfigResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__uploadCACConfigResponse), type))
		return soap->error;
	if (a->_ns1__uploadCACConfigResponse::out)
	{	if (soap_out_PointerTostd__string(soap, "out", -1, &a->_ns1__uploadCACConfigResponse::out, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "out"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__uploadCACConfigResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__uploadCACConfigResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__uploadCACConfigResponse * SOAP_FMAC4 soap_in__ns1__uploadCACConfigResponse(struct soap *soap, const char *tag, _ns1__uploadCACConfigResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__uploadCACConfigResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__uploadCACConfigResponse, sizeof(_ns1__uploadCACConfigResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__uploadCACConfigResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__uploadCACConfigResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_out1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "out", &(a->_ns1__uploadCACConfigResponse::out), "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__uploadCACConfigResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__uploadCACConfigResponse, 0, sizeof(_ns1__uploadCACConfigResponse), 0, soap_copy__ns1__uploadCACConfigResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__uploadCACConfigResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__uploadCACConfigResponse);
	if (this->soap_out(soap, tag?tag:"ns1:uploadCACConfigResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__uploadCACConfigResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__uploadCACConfigResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__uploadCACConfigResponse * SOAP_FMAC4 soap_get__ns1__uploadCACConfigResponse(struct soap *soap, _ns1__uploadCACConfigResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__uploadCACConfigResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__uploadCACConfigResponse * SOAP_FMAC2 soap_instantiate__ns1__uploadCACConfigResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__uploadCACConfigResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__uploadCACConfigResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__uploadCACConfigResponse);
		if (size)
			*size = sizeof(_ns1__uploadCACConfigResponse);
		((_ns1__uploadCACConfigResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__uploadCACConfigResponse, n);
		if (size)
			*size = n * sizeof(_ns1__uploadCACConfigResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__uploadCACConfigResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__uploadCACConfigResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadCACConfigResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__uploadCACConfigResponse %p -> %p\n", q, p));
	*(_ns1__uploadCACConfigResponse*)p = *(_ns1__uploadCACConfigResponse*)q;
}

void _ns1__uploadCACConfig::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__uploadCACConfig::in0 = NULL;
	/* transient soap skipped */
}

void _ns1__uploadCACConfig::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__uploadCACConfig::in0);
	/* transient soap skipped */
}

int _ns1__uploadCACConfig::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__uploadCACConfig(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadCACConfig(struct soap *soap, const char *tag, int id, const _ns1__uploadCACConfig *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__uploadCACConfig), type))
		return soap->error;
	if (a->_ns1__uploadCACConfig::in0)
	{	if (soap_out_PointerTostd__string(soap, "in0", -1, &a->_ns1__uploadCACConfig::in0, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "in0"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__uploadCACConfig::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__uploadCACConfig(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__uploadCACConfig * SOAP_FMAC4 soap_in__ns1__uploadCACConfig(struct soap *soap, const char *tag, _ns1__uploadCACConfig *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__uploadCACConfig *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__uploadCACConfig, sizeof(_ns1__uploadCACConfig), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__uploadCACConfig)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__uploadCACConfig *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_in01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "in0", &(a->_ns1__uploadCACConfig::in0), "xsd:string"))
				{	soap_flag_in01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__uploadCACConfig *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__uploadCACConfig, 0, sizeof(_ns1__uploadCACConfig), 0, soap_copy__ns1__uploadCACConfig);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in01 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__uploadCACConfig::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__uploadCACConfig);
	if (this->soap_out(soap, tag?tag:"ns1:uploadCACConfig", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__uploadCACConfig::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__uploadCACConfig(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__uploadCACConfig * SOAP_FMAC4 soap_get__ns1__uploadCACConfig(struct soap *soap, _ns1__uploadCACConfig *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__uploadCACConfig(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__uploadCACConfig * SOAP_FMAC2 soap_instantiate__ns1__uploadCACConfig(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__uploadCACConfig(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__uploadCACConfig, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__uploadCACConfig);
		if (size)
			*size = sizeof(_ns1__uploadCACConfig);
		((_ns1__uploadCACConfig*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__uploadCACConfig, n);
		if (size)
			*size = n * sizeof(_ns1__uploadCACConfig);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__uploadCACConfig*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__uploadCACConfig*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadCACConfig(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__uploadCACConfig %p -> %p\n", q, p));
	*(_ns1__uploadCACConfig*)p = *(_ns1__uploadCACConfig*)q;
}

void _ns1__uploadCACHeartbeatInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__uploadCACHeartbeatInfoResponse::out = NULL;
	/* transient soap skipped */
}

void _ns1__uploadCACHeartbeatInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__uploadCACHeartbeatInfoResponse::out);
	/* transient soap skipped */
}

int _ns1__uploadCACHeartbeatInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__uploadCACHeartbeatInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadCACHeartbeatInfoResponse(struct soap *soap, const char *tag, int id, const _ns1__uploadCACHeartbeatInfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse), type))
		return soap->error;
	if (a->_ns1__uploadCACHeartbeatInfoResponse::out)
	{	if (soap_out_PointerTostd__string(soap, "out", -1, &a->_ns1__uploadCACHeartbeatInfoResponse::out, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "out"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__uploadCACHeartbeatInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__uploadCACHeartbeatInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__uploadCACHeartbeatInfoResponse * SOAP_FMAC4 soap_in__ns1__uploadCACHeartbeatInfoResponse(struct soap *soap, const char *tag, _ns1__uploadCACHeartbeatInfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__uploadCACHeartbeatInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse, sizeof(_ns1__uploadCACHeartbeatInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__uploadCACHeartbeatInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_out1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "out", &(a->_ns1__uploadCACHeartbeatInfoResponse::out), "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__uploadCACHeartbeatInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse, 0, sizeof(_ns1__uploadCACHeartbeatInfoResponse), 0, soap_copy__ns1__uploadCACHeartbeatInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__uploadCACHeartbeatInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse);
	if (this->soap_out(soap, tag?tag:"ns1:uploadCACHeartbeatInfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__uploadCACHeartbeatInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__uploadCACHeartbeatInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__uploadCACHeartbeatInfoResponse * SOAP_FMAC4 soap_get__ns1__uploadCACHeartbeatInfoResponse(struct soap *soap, _ns1__uploadCACHeartbeatInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__uploadCACHeartbeatInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__uploadCACHeartbeatInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__uploadCACHeartbeatInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__uploadCACHeartbeatInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__uploadCACHeartbeatInfoResponse);
		if (size)
			*size = sizeof(_ns1__uploadCACHeartbeatInfoResponse);
		((_ns1__uploadCACHeartbeatInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__uploadCACHeartbeatInfoResponse, n);
		if (size)
			*size = n * sizeof(_ns1__uploadCACHeartbeatInfoResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__uploadCACHeartbeatInfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__uploadCACHeartbeatInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadCACHeartbeatInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__uploadCACHeartbeatInfoResponse %p -> %p\n", q, p));
	*(_ns1__uploadCACHeartbeatInfoResponse*)p = *(_ns1__uploadCACHeartbeatInfoResponse*)q;
}

void _ns1__uploadCACHeartbeatInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__uploadCACHeartbeatInfo::in0 = NULL;
	/* transient soap skipped */
}

void _ns1__uploadCACHeartbeatInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__uploadCACHeartbeatInfo::in0);
	/* transient soap skipped */
}

int _ns1__uploadCACHeartbeatInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__uploadCACHeartbeatInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadCACHeartbeatInfo(struct soap *soap, const char *tag, int id, const _ns1__uploadCACHeartbeatInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__uploadCACHeartbeatInfo), type))
		return soap->error;
	if (a->_ns1__uploadCACHeartbeatInfo::in0)
	{	if (soap_out_PointerTostd__string(soap, "in0", -1, &a->_ns1__uploadCACHeartbeatInfo::in0, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "in0"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__uploadCACHeartbeatInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__uploadCACHeartbeatInfo(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__uploadCACHeartbeatInfo * SOAP_FMAC4 soap_in__ns1__uploadCACHeartbeatInfo(struct soap *soap, const char *tag, _ns1__uploadCACHeartbeatInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__uploadCACHeartbeatInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__uploadCACHeartbeatInfo, sizeof(_ns1__uploadCACHeartbeatInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__uploadCACHeartbeatInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__uploadCACHeartbeatInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_in01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "in0", &(a->_ns1__uploadCACHeartbeatInfo::in0), "xsd:string"))
				{	soap_flag_in01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__uploadCACHeartbeatInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__uploadCACHeartbeatInfo, 0, sizeof(_ns1__uploadCACHeartbeatInfo), 0, soap_copy__ns1__uploadCACHeartbeatInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in01 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__uploadCACHeartbeatInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__uploadCACHeartbeatInfo);
	if (this->soap_out(soap, tag?tag:"ns1:uploadCACHeartbeatInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__uploadCACHeartbeatInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__uploadCACHeartbeatInfo(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__uploadCACHeartbeatInfo * SOAP_FMAC4 soap_get__ns1__uploadCACHeartbeatInfo(struct soap *soap, _ns1__uploadCACHeartbeatInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__uploadCACHeartbeatInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__uploadCACHeartbeatInfo * SOAP_FMAC2 soap_instantiate__ns1__uploadCACHeartbeatInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__uploadCACHeartbeatInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__uploadCACHeartbeatInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__uploadCACHeartbeatInfo);
		if (size)
			*size = sizeof(_ns1__uploadCACHeartbeatInfo);
		((_ns1__uploadCACHeartbeatInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__uploadCACHeartbeatInfo, n);
		if (size)
			*size = n * sizeof(_ns1__uploadCACHeartbeatInfo);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__uploadCACHeartbeatInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__uploadCACHeartbeatInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadCACHeartbeatInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__uploadCACHeartbeatInfo %p -> %p\n", q, p));
	*(_ns1__uploadCACHeartbeatInfo*)p = *(_ns1__uploadCACHeartbeatInfo*)q;
}

void _ns1__downloadCACLatestVersionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__downloadCACLatestVersionResponse::out = NULL;
	/* transient soap skipped */
}

void _ns1__downloadCACLatestVersionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__downloadCACLatestVersionResponse::out);
	/* transient soap skipped */
}

int _ns1__downloadCACLatestVersionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__downloadCACLatestVersionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__downloadCACLatestVersionResponse(struct soap *soap, const char *tag, int id, const _ns1__downloadCACLatestVersionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__downloadCACLatestVersionResponse), type))
		return soap->error;
	if (a->_ns1__downloadCACLatestVersionResponse::out)
	{	if (soap_out_PointerTostd__string(soap, "out", -1, &a->_ns1__downloadCACLatestVersionResponse::out, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "out"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__downloadCACLatestVersionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__downloadCACLatestVersionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__downloadCACLatestVersionResponse * SOAP_FMAC4 soap_in__ns1__downloadCACLatestVersionResponse(struct soap *soap, const char *tag, _ns1__downloadCACLatestVersionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__downloadCACLatestVersionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__downloadCACLatestVersionResponse, sizeof(_ns1__downloadCACLatestVersionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__downloadCACLatestVersionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__downloadCACLatestVersionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_out1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "out", &(a->_ns1__downloadCACLatestVersionResponse::out), "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__downloadCACLatestVersionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__downloadCACLatestVersionResponse, 0, sizeof(_ns1__downloadCACLatestVersionResponse), 0, soap_copy__ns1__downloadCACLatestVersionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__downloadCACLatestVersionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__downloadCACLatestVersionResponse);
	if (this->soap_out(soap, tag?tag:"ns1:downloadCACLatestVersionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__downloadCACLatestVersionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__downloadCACLatestVersionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__downloadCACLatestVersionResponse * SOAP_FMAC4 soap_get__ns1__downloadCACLatestVersionResponse(struct soap *soap, _ns1__downloadCACLatestVersionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__downloadCACLatestVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__downloadCACLatestVersionResponse * SOAP_FMAC2 soap_instantiate__ns1__downloadCACLatestVersionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__downloadCACLatestVersionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__downloadCACLatestVersionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__downloadCACLatestVersionResponse);
		if (size)
			*size = sizeof(_ns1__downloadCACLatestVersionResponse);
		((_ns1__downloadCACLatestVersionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__downloadCACLatestVersionResponse, n);
		if (size)
			*size = n * sizeof(_ns1__downloadCACLatestVersionResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__downloadCACLatestVersionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__downloadCACLatestVersionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__downloadCACLatestVersionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__downloadCACLatestVersionResponse %p -> %p\n", q, p));
	*(_ns1__downloadCACLatestVersionResponse*)p = *(_ns1__downloadCACLatestVersionResponse*)q;
}

void _ns1__downloadCACLatestVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__downloadCACLatestVersion::in0 = NULL;
	/* transient soap skipped */
}

void _ns1__downloadCACLatestVersion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__downloadCACLatestVersion::in0);
	/* transient soap skipped */
}

int _ns1__downloadCACLatestVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__downloadCACLatestVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__downloadCACLatestVersion(struct soap *soap, const char *tag, int id, const _ns1__downloadCACLatestVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__downloadCACLatestVersion), type))
		return soap->error;
	if (a->_ns1__downloadCACLatestVersion::in0)
	{	if (soap_out_PointerTostd__string(soap, "in0", -1, &a->_ns1__downloadCACLatestVersion::in0, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "in0"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__downloadCACLatestVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__downloadCACLatestVersion(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__downloadCACLatestVersion * SOAP_FMAC4 soap_in__ns1__downloadCACLatestVersion(struct soap *soap, const char *tag, _ns1__downloadCACLatestVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__downloadCACLatestVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__downloadCACLatestVersion, sizeof(_ns1__downloadCACLatestVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__downloadCACLatestVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__downloadCACLatestVersion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_in01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "in0", &(a->_ns1__downloadCACLatestVersion::in0), "xsd:string"))
				{	soap_flag_in01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__downloadCACLatestVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__downloadCACLatestVersion, 0, sizeof(_ns1__downloadCACLatestVersion), 0, soap_copy__ns1__downloadCACLatestVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in01 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__downloadCACLatestVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__downloadCACLatestVersion);
	if (this->soap_out(soap, tag?tag:"ns1:downloadCACLatestVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__downloadCACLatestVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__downloadCACLatestVersion(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__downloadCACLatestVersion * SOAP_FMAC4 soap_get__ns1__downloadCACLatestVersion(struct soap *soap, _ns1__downloadCACLatestVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__downloadCACLatestVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__downloadCACLatestVersion * SOAP_FMAC2 soap_instantiate__ns1__downloadCACLatestVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__downloadCACLatestVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__downloadCACLatestVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__downloadCACLatestVersion);
		if (size)
			*size = sizeof(_ns1__downloadCACLatestVersion);
		((_ns1__downloadCACLatestVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__downloadCACLatestVersion, n);
		if (size)
			*size = n * sizeof(_ns1__downloadCACLatestVersion);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__downloadCACLatestVersion*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__downloadCACLatestVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__downloadCACLatestVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__downloadCACLatestVersion %p -> %p\n", q, p));
	*(_ns1__downloadCACLatestVersion*)p = *(_ns1__downloadCACLatestVersion*)q;
}

void _ns1__downloadCACUpdateFileResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__downloadCACUpdateFileResponse::out = NULL;
	/* transient soap skipped */
}

void _ns1__downloadCACUpdateFileResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__downloadCACUpdateFileResponse::out);
	/* transient soap skipped */
}

int _ns1__downloadCACUpdateFileResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__downloadCACUpdateFileResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__downloadCACUpdateFileResponse(struct soap *soap, const char *tag, int id, const _ns1__downloadCACUpdateFileResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__downloadCACUpdateFileResponse), type))
		return soap->error;
	if (a->_ns1__downloadCACUpdateFileResponse::out)
	{	if (soap_out_PointerTostd__string(soap, "out", -1, &a->_ns1__downloadCACUpdateFileResponse::out, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "out"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__downloadCACUpdateFileResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__downloadCACUpdateFileResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__downloadCACUpdateFileResponse * SOAP_FMAC4 soap_in__ns1__downloadCACUpdateFileResponse(struct soap *soap, const char *tag, _ns1__downloadCACUpdateFileResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__downloadCACUpdateFileResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__downloadCACUpdateFileResponse, sizeof(_ns1__downloadCACUpdateFileResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__downloadCACUpdateFileResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__downloadCACUpdateFileResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_out1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "out", &(a->_ns1__downloadCACUpdateFileResponse::out), "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__downloadCACUpdateFileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__downloadCACUpdateFileResponse, 0, sizeof(_ns1__downloadCACUpdateFileResponse), 0, soap_copy__ns1__downloadCACUpdateFileResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__downloadCACUpdateFileResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__downloadCACUpdateFileResponse);
	if (this->soap_out(soap, tag?tag:"ns1:downloadCACUpdateFileResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__downloadCACUpdateFileResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__downloadCACUpdateFileResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__downloadCACUpdateFileResponse * SOAP_FMAC4 soap_get__ns1__downloadCACUpdateFileResponse(struct soap *soap, _ns1__downloadCACUpdateFileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__downloadCACUpdateFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__downloadCACUpdateFileResponse * SOAP_FMAC2 soap_instantiate__ns1__downloadCACUpdateFileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__downloadCACUpdateFileResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__downloadCACUpdateFileResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__downloadCACUpdateFileResponse);
		if (size)
			*size = sizeof(_ns1__downloadCACUpdateFileResponse);
		((_ns1__downloadCACUpdateFileResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__downloadCACUpdateFileResponse, n);
		if (size)
			*size = n * sizeof(_ns1__downloadCACUpdateFileResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__downloadCACUpdateFileResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__downloadCACUpdateFileResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__downloadCACUpdateFileResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__downloadCACUpdateFileResponse %p -> %p\n", q, p));
	*(_ns1__downloadCACUpdateFileResponse*)p = *(_ns1__downloadCACUpdateFileResponse*)q;
}

void _ns1__downloadCACUpdateFile::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__downloadCACUpdateFile::in0 = NULL;
	/* transient soap skipped */
}

void _ns1__downloadCACUpdateFile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__downloadCACUpdateFile::in0);
	/* transient soap skipped */
}

int _ns1__downloadCACUpdateFile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__downloadCACUpdateFile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__downloadCACUpdateFile(struct soap *soap, const char *tag, int id, const _ns1__downloadCACUpdateFile *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__downloadCACUpdateFile), type))
		return soap->error;
	if (a->_ns1__downloadCACUpdateFile::in0)
	{	if (soap_out_PointerTostd__string(soap, "in0", -1, &a->_ns1__downloadCACUpdateFile::in0, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "in0"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__downloadCACUpdateFile::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__downloadCACUpdateFile(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__downloadCACUpdateFile * SOAP_FMAC4 soap_in__ns1__downloadCACUpdateFile(struct soap *soap, const char *tag, _ns1__downloadCACUpdateFile *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__downloadCACUpdateFile *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__downloadCACUpdateFile, sizeof(_ns1__downloadCACUpdateFile), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__downloadCACUpdateFile)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__downloadCACUpdateFile *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_in01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "in0", &(a->_ns1__downloadCACUpdateFile::in0), "xsd:string"))
				{	soap_flag_in01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__downloadCACUpdateFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__downloadCACUpdateFile, 0, sizeof(_ns1__downloadCACUpdateFile), 0, soap_copy__ns1__downloadCACUpdateFile);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in01 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__downloadCACUpdateFile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__downloadCACUpdateFile);
	if (this->soap_out(soap, tag?tag:"ns1:downloadCACUpdateFile", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__downloadCACUpdateFile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__downloadCACUpdateFile(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__downloadCACUpdateFile * SOAP_FMAC4 soap_get__ns1__downloadCACUpdateFile(struct soap *soap, _ns1__downloadCACUpdateFile *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__downloadCACUpdateFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__downloadCACUpdateFile * SOAP_FMAC2 soap_instantiate__ns1__downloadCACUpdateFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__downloadCACUpdateFile(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__downloadCACUpdateFile, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__downloadCACUpdateFile);
		if (size)
			*size = sizeof(_ns1__downloadCACUpdateFile);
		((_ns1__downloadCACUpdateFile*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__downloadCACUpdateFile, n);
		if (size)
			*size = n * sizeof(_ns1__downloadCACUpdateFile);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__downloadCACUpdateFile*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__downloadCACUpdateFile*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__downloadCACUpdateFile(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__downloadCACUpdateFile %p -> %p\n", q, p));
	*(_ns1__downloadCACUpdateFile*)p = *(_ns1__downloadCACUpdateFile*)q;
}

void _ns1__uploadCACDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__uploadCACDataResponse::out = NULL;
	/* transient soap skipped */
}

void _ns1__uploadCACDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__uploadCACDataResponse::out);
	/* transient soap skipped */
}

int _ns1__uploadCACDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__uploadCACDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadCACDataResponse(struct soap *soap, const char *tag, int id, const _ns1__uploadCACDataResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__uploadCACDataResponse), type))
		return soap->error;
	if (a->_ns1__uploadCACDataResponse::out)
	{	if (soap_out_PointerTostd__string(soap, "out", -1, &a->_ns1__uploadCACDataResponse::out, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "out"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__uploadCACDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__uploadCACDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__uploadCACDataResponse * SOAP_FMAC4 soap_in__ns1__uploadCACDataResponse(struct soap *soap, const char *tag, _ns1__uploadCACDataResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__uploadCACDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__uploadCACDataResponse, sizeof(_ns1__uploadCACDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__uploadCACDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__uploadCACDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_out1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_out1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "out", &(a->_ns1__uploadCACDataResponse::out), "xsd:string"))
				{	soap_flag_out1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__uploadCACDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__uploadCACDataResponse, 0, sizeof(_ns1__uploadCACDataResponse), 0, soap_copy__ns1__uploadCACDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_out1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__uploadCACDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__uploadCACDataResponse);
	if (this->soap_out(soap, tag?tag:"ns1:uploadCACDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__uploadCACDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__uploadCACDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__uploadCACDataResponse * SOAP_FMAC4 soap_get__ns1__uploadCACDataResponse(struct soap *soap, _ns1__uploadCACDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__uploadCACDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__uploadCACDataResponse * SOAP_FMAC2 soap_instantiate__ns1__uploadCACDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__uploadCACDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__uploadCACDataResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__uploadCACDataResponse);
		if (size)
			*size = sizeof(_ns1__uploadCACDataResponse);
		((_ns1__uploadCACDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__uploadCACDataResponse, n);
		if (size)
			*size = n * sizeof(_ns1__uploadCACDataResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__uploadCACDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__uploadCACDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadCACDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__uploadCACDataResponse %p -> %p\n", q, p));
	*(_ns1__uploadCACDataResponse*)p = *(_ns1__uploadCACDataResponse*)q;
}

void _ns1__uploadCACData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__uploadCACData::in0 = NULL;
	/* transient soap skipped */
}

void _ns1__uploadCACData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__uploadCACData::in0);
	/* transient soap skipped */
}

int _ns1__uploadCACData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__uploadCACData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadCACData(struct soap *soap, const char *tag, int id, const _ns1__uploadCACData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__uploadCACData), type))
		return soap->error;
	if (a->_ns1__uploadCACData::in0)
	{	if (soap_out_PointerTostd__string(soap, "in0", -1, &a->_ns1__uploadCACData::in0, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "in0"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__uploadCACData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__uploadCACData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__uploadCACData * SOAP_FMAC4 soap_in__ns1__uploadCACData(struct soap *soap, const char *tag, _ns1__uploadCACData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__uploadCACData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__uploadCACData, sizeof(_ns1__uploadCACData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__uploadCACData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__uploadCACData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_in01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "in0", &(a->_ns1__uploadCACData::in0), "xsd:string"))
				{	soap_flag_in01--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__uploadCACData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__uploadCACData, 0, sizeof(_ns1__uploadCACData), 0, soap_copy__ns1__uploadCACData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in01 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__uploadCACData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__uploadCACData);
	if (this->soap_out(soap, tag?tag:"ns1:uploadCACData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__uploadCACData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__uploadCACData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__uploadCACData * SOAP_FMAC4 soap_get__ns1__uploadCACData(struct soap *soap, _ns1__uploadCACData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__uploadCACData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__uploadCACData * SOAP_FMAC2 soap_instantiate__ns1__uploadCACData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__uploadCACData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__uploadCACData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__uploadCACData);
		if (size)
			*size = sizeof(_ns1__uploadCACData);
		((_ns1__uploadCACData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__uploadCACData, n);
		if (size)
			*size = n * sizeof(_ns1__uploadCACData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__uploadCACData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__uploadCACData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadCACData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__uploadCACData %p -> %p\n", q, p));
	*(_ns1__uploadCACData*)p = *(_ns1__uploadCACData*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__downloadCACHistoryVersion(struct soap *soap, struct __ns1__downloadCACHistoryVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__downloadCACHistoryVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__downloadCACHistoryVersion(struct soap *soap, const struct __ns1__downloadCACHistoryVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__downloadCACHistoryVersion(soap, &a->ns1__downloadCACHistoryVersion);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__downloadCACHistoryVersion(struct soap *soap, const char *tag, int id, const struct __ns1__downloadCACHistoryVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__downloadCACHistoryVersion(soap, "ns1:downloadCACHistoryVersion", -1, &a->ns1__downloadCACHistoryVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__downloadCACHistoryVersion * SOAP_FMAC4 soap_in___ns1__downloadCACHistoryVersion(struct soap *soap, const char *tag, struct __ns1__downloadCACHistoryVersion *a, const char *type)
{
	size_t soap_flag_ns1__downloadCACHistoryVersion = 1;
	short soap_flag;
	a = (struct __ns1__downloadCACHistoryVersion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__downloadCACHistoryVersion, sizeof(struct __ns1__downloadCACHistoryVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__downloadCACHistoryVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__downloadCACHistoryVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__downloadCACHistoryVersion(soap, "ns1:downloadCACHistoryVersion", &a->ns1__downloadCACHistoryVersion, ""))
				{	soap_flag_ns1__downloadCACHistoryVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__downloadCACHistoryVersion(struct soap *soap, const struct __ns1__downloadCACHistoryVersion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__downloadCACHistoryVersion(soap, tag?tag:"-ns1:downloadCACHistoryVersion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__downloadCACHistoryVersion * SOAP_FMAC4 soap_get___ns1__downloadCACHistoryVersion(struct soap *soap, struct __ns1__downloadCACHistoryVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__downloadCACHistoryVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__downloadCACHistoryVersion * SOAP_FMAC2 soap_instantiate___ns1__downloadCACHistoryVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__downloadCACHistoryVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__downloadCACHistoryVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__downloadCACHistoryVersion);
		if (size)
			*size = sizeof(struct __ns1__downloadCACHistoryVersion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__downloadCACHistoryVersion, n);
		if (size)
			*size = n * sizeof(struct __ns1__downloadCACHistoryVersion);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__downloadCACHistoryVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__downloadCACHistoryVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__downloadCACHistoryVersion %p -> %p\n", q, p));
	*(struct __ns1__downloadCACHistoryVersion*)p = *(struct __ns1__downloadCACHistoryVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__uploadCACConfig(struct soap *soap, struct __ns1__uploadCACConfig *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__uploadCACConfig = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__uploadCACConfig(struct soap *soap, const struct __ns1__uploadCACConfig *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__uploadCACConfig(soap, &a->ns1__uploadCACConfig);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__uploadCACConfig(struct soap *soap, const char *tag, int id, const struct __ns1__uploadCACConfig *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__uploadCACConfig(soap, "ns1:uploadCACConfig", -1, &a->ns1__uploadCACConfig, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadCACConfig * SOAP_FMAC4 soap_in___ns1__uploadCACConfig(struct soap *soap, const char *tag, struct __ns1__uploadCACConfig *a, const char *type)
{
	size_t soap_flag_ns1__uploadCACConfig = 1;
	short soap_flag;
	a = (struct __ns1__uploadCACConfig *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__uploadCACConfig, sizeof(struct __ns1__uploadCACConfig), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__uploadCACConfig(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__uploadCACConfig && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__uploadCACConfig(soap, "ns1:uploadCACConfig", &a->ns1__uploadCACConfig, ""))
				{	soap_flag_ns1__uploadCACConfig--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__uploadCACConfig(struct soap *soap, const struct __ns1__uploadCACConfig *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__uploadCACConfig(soap, tag?tag:"-ns1:uploadCACConfig", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadCACConfig * SOAP_FMAC4 soap_get___ns1__uploadCACConfig(struct soap *soap, struct __ns1__uploadCACConfig *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__uploadCACConfig(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__uploadCACConfig * SOAP_FMAC2 soap_instantiate___ns1__uploadCACConfig(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__uploadCACConfig(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__uploadCACConfig, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__uploadCACConfig);
		if (size)
			*size = sizeof(struct __ns1__uploadCACConfig);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__uploadCACConfig, n);
		if (size)
			*size = n * sizeof(struct __ns1__uploadCACConfig);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__uploadCACConfig*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__uploadCACConfig(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__uploadCACConfig %p -> %p\n", q, p));
	*(struct __ns1__uploadCACConfig*)p = *(struct __ns1__uploadCACConfig*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__uploadCACHeartbeatInfo(struct soap *soap, struct __ns1__uploadCACHeartbeatInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__uploadCACHeartbeatInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__uploadCACHeartbeatInfo(struct soap *soap, const struct __ns1__uploadCACHeartbeatInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__uploadCACHeartbeatInfo(soap, &a->ns1__uploadCACHeartbeatInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__uploadCACHeartbeatInfo(struct soap *soap, const char *tag, int id, const struct __ns1__uploadCACHeartbeatInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__uploadCACHeartbeatInfo(soap, "ns1:uploadCACHeartbeatInfo", -1, &a->ns1__uploadCACHeartbeatInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadCACHeartbeatInfo * SOAP_FMAC4 soap_in___ns1__uploadCACHeartbeatInfo(struct soap *soap, const char *tag, struct __ns1__uploadCACHeartbeatInfo *a, const char *type)
{
	size_t soap_flag_ns1__uploadCACHeartbeatInfo = 1;
	short soap_flag;
	a = (struct __ns1__uploadCACHeartbeatInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__uploadCACHeartbeatInfo, sizeof(struct __ns1__uploadCACHeartbeatInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__uploadCACHeartbeatInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__uploadCACHeartbeatInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__uploadCACHeartbeatInfo(soap, "ns1:uploadCACHeartbeatInfo", &a->ns1__uploadCACHeartbeatInfo, ""))
				{	soap_flag_ns1__uploadCACHeartbeatInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__uploadCACHeartbeatInfo(struct soap *soap, const struct __ns1__uploadCACHeartbeatInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__uploadCACHeartbeatInfo(soap, tag?tag:"-ns1:uploadCACHeartbeatInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadCACHeartbeatInfo * SOAP_FMAC4 soap_get___ns1__uploadCACHeartbeatInfo(struct soap *soap, struct __ns1__uploadCACHeartbeatInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__uploadCACHeartbeatInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__uploadCACHeartbeatInfo * SOAP_FMAC2 soap_instantiate___ns1__uploadCACHeartbeatInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__uploadCACHeartbeatInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__uploadCACHeartbeatInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__uploadCACHeartbeatInfo);
		if (size)
			*size = sizeof(struct __ns1__uploadCACHeartbeatInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__uploadCACHeartbeatInfo, n);
		if (size)
			*size = n * sizeof(struct __ns1__uploadCACHeartbeatInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__uploadCACHeartbeatInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__uploadCACHeartbeatInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__uploadCACHeartbeatInfo %p -> %p\n", q, p));
	*(struct __ns1__uploadCACHeartbeatInfo*)p = *(struct __ns1__uploadCACHeartbeatInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__downloadCACLatestVersion(struct soap *soap, struct __ns1__downloadCACLatestVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__downloadCACLatestVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__downloadCACLatestVersion(struct soap *soap, const struct __ns1__downloadCACLatestVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__downloadCACLatestVersion(soap, &a->ns1__downloadCACLatestVersion);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__downloadCACLatestVersion(struct soap *soap, const char *tag, int id, const struct __ns1__downloadCACLatestVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__downloadCACLatestVersion(soap, "ns1:downloadCACLatestVersion", -1, &a->ns1__downloadCACLatestVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__downloadCACLatestVersion * SOAP_FMAC4 soap_in___ns1__downloadCACLatestVersion(struct soap *soap, const char *tag, struct __ns1__downloadCACLatestVersion *a, const char *type)
{
	size_t soap_flag_ns1__downloadCACLatestVersion = 1;
	short soap_flag;
	a = (struct __ns1__downloadCACLatestVersion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__downloadCACLatestVersion, sizeof(struct __ns1__downloadCACLatestVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__downloadCACLatestVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__downloadCACLatestVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__downloadCACLatestVersion(soap, "ns1:downloadCACLatestVersion", &a->ns1__downloadCACLatestVersion, ""))
				{	soap_flag_ns1__downloadCACLatestVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__downloadCACLatestVersion(struct soap *soap, const struct __ns1__downloadCACLatestVersion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__downloadCACLatestVersion(soap, tag?tag:"-ns1:downloadCACLatestVersion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__downloadCACLatestVersion * SOAP_FMAC4 soap_get___ns1__downloadCACLatestVersion(struct soap *soap, struct __ns1__downloadCACLatestVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__downloadCACLatestVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__downloadCACLatestVersion * SOAP_FMAC2 soap_instantiate___ns1__downloadCACLatestVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__downloadCACLatestVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__downloadCACLatestVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__downloadCACLatestVersion);
		if (size)
			*size = sizeof(struct __ns1__downloadCACLatestVersion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__downloadCACLatestVersion, n);
		if (size)
			*size = n * sizeof(struct __ns1__downloadCACLatestVersion);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__downloadCACLatestVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__downloadCACLatestVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__downloadCACLatestVersion %p -> %p\n", q, p));
	*(struct __ns1__downloadCACLatestVersion*)p = *(struct __ns1__downloadCACLatestVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__downloadCACUpdateFile(struct soap *soap, struct __ns1__downloadCACUpdateFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__downloadCACUpdateFile = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__downloadCACUpdateFile(struct soap *soap, const struct __ns1__downloadCACUpdateFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__downloadCACUpdateFile(soap, &a->ns1__downloadCACUpdateFile);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__downloadCACUpdateFile(struct soap *soap, const char *tag, int id, const struct __ns1__downloadCACUpdateFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__downloadCACUpdateFile(soap, "ns1:downloadCACUpdateFile", -1, &a->ns1__downloadCACUpdateFile, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__downloadCACUpdateFile * SOAP_FMAC4 soap_in___ns1__downloadCACUpdateFile(struct soap *soap, const char *tag, struct __ns1__downloadCACUpdateFile *a, const char *type)
{
	size_t soap_flag_ns1__downloadCACUpdateFile = 1;
	short soap_flag;
	a = (struct __ns1__downloadCACUpdateFile *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__downloadCACUpdateFile, sizeof(struct __ns1__downloadCACUpdateFile), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__downloadCACUpdateFile(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__downloadCACUpdateFile && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__downloadCACUpdateFile(soap, "ns1:downloadCACUpdateFile", &a->ns1__downloadCACUpdateFile, ""))
				{	soap_flag_ns1__downloadCACUpdateFile--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__downloadCACUpdateFile(struct soap *soap, const struct __ns1__downloadCACUpdateFile *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__downloadCACUpdateFile(soap, tag?tag:"-ns1:downloadCACUpdateFile", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__downloadCACUpdateFile * SOAP_FMAC4 soap_get___ns1__downloadCACUpdateFile(struct soap *soap, struct __ns1__downloadCACUpdateFile *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__downloadCACUpdateFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__downloadCACUpdateFile * SOAP_FMAC2 soap_instantiate___ns1__downloadCACUpdateFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__downloadCACUpdateFile(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__downloadCACUpdateFile, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__downloadCACUpdateFile);
		if (size)
			*size = sizeof(struct __ns1__downloadCACUpdateFile);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__downloadCACUpdateFile, n);
		if (size)
			*size = n * sizeof(struct __ns1__downloadCACUpdateFile);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__downloadCACUpdateFile*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__downloadCACUpdateFile(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__downloadCACUpdateFile %p -> %p\n", q, p));
	*(struct __ns1__downloadCACUpdateFile*)p = *(struct __ns1__downloadCACUpdateFile*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__uploadCACData(struct soap *soap, struct __ns1__uploadCACData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__uploadCACData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__uploadCACData(struct soap *soap, const struct __ns1__uploadCACData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__uploadCACData(soap, &a->ns1__uploadCACData);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__uploadCACData(struct soap *soap, const char *tag, int id, const struct __ns1__uploadCACData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__uploadCACData(soap, "ns1:uploadCACData", -1, &a->ns1__uploadCACData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadCACData * SOAP_FMAC4 soap_in___ns1__uploadCACData(struct soap *soap, const char *tag, struct __ns1__uploadCACData *a, const char *type)
{
	size_t soap_flag_ns1__uploadCACData = 1;
	short soap_flag;
	a = (struct __ns1__uploadCACData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__uploadCACData, sizeof(struct __ns1__uploadCACData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__uploadCACData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__uploadCACData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__uploadCACData(soap, "ns1:uploadCACData", &a->ns1__uploadCACData, ""))
				{	soap_flag_ns1__uploadCACData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__uploadCACData(struct soap *soap, const struct __ns1__uploadCACData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__uploadCACData(soap, tag?tag:"-ns1:uploadCACData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__uploadCACData * SOAP_FMAC4 soap_get___ns1__uploadCACData(struct soap *soap, struct __ns1__uploadCACData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__uploadCACData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__uploadCACData * SOAP_FMAC2 soap_instantiate___ns1__uploadCACData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__uploadCACData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__uploadCACData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__uploadCACData);
		if (size)
			*size = sizeof(struct __ns1__uploadCACData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__uploadCACData, n);
		if (size)
			*size = n * sizeof(struct __ns1__uploadCACData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__uploadCACData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__uploadCACData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__uploadCACData %p -> %p\n", q, p));
	*(struct __ns1__uploadCACData*)p = *(struct __ns1__uploadCACData*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__downloadCACHistoryVersionResponse(struct soap *soap, _ns1__downloadCACHistoryVersionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__downloadCACHistoryVersionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__downloadCACHistoryVersionResponse(struct soap *soap, const char *tag, int id, _ns1__downloadCACHistoryVersionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__downloadCACHistoryVersionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__downloadCACHistoryVersionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__downloadCACHistoryVersionResponse(struct soap *soap, const char *tag, _ns1__downloadCACHistoryVersionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__downloadCACHistoryVersionResponse **)soap_malloc(soap, sizeof(_ns1__downloadCACHistoryVersionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__downloadCACHistoryVersionResponse *)soap_instantiate__ns1__downloadCACHistoryVersionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__downloadCACHistoryVersionResponse ** p = (_ns1__downloadCACHistoryVersionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__downloadCACHistoryVersionResponse, sizeof(_ns1__downloadCACHistoryVersionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__downloadCACHistoryVersionResponse(struct soap *soap, _ns1__downloadCACHistoryVersionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__downloadCACHistoryVersionResponse);
	if (soap_out_PointerTo_ns1__downloadCACHistoryVersionResponse(soap, tag?tag:"ns1:downloadCACHistoryVersionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__downloadCACHistoryVersionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__downloadCACHistoryVersionResponse(struct soap *soap, _ns1__downloadCACHistoryVersionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__downloadCACHistoryVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__downloadCACHistoryVersion(struct soap *soap, _ns1__downloadCACHistoryVersion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__downloadCACHistoryVersion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__downloadCACHistoryVersion(struct soap *soap, const char *tag, int id, _ns1__downloadCACHistoryVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__downloadCACHistoryVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__downloadCACHistoryVersion ** SOAP_FMAC4 soap_in_PointerTo_ns1__downloadCACHistoryVersion(struct soap *soap, const char *tag, _ns1__downloadCACHistoryVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__downloadCACHistoryVersion **)soap_malloc(soap, sizeof(_ns1__downloadCACHistoryVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__downloadCACHistoryVersion *)soap_instantiate__ns1__downloadCACHistoryVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__downloadCACHistoryVersion ** p = (_ns1__downloadCACHistoryVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__downloadCACHistoryVersion, sizeof(_ns1__downloadCACHistoryVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__downloadCACHistoryVersion(struct soap *soap, _ns1__downloadCACHistoryVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__downloadCACHistoryVersion);
	if (soap_out_PointerTo_ns1__downloadCACHistoryVersion(soap, tag?tag:"ns1:downloadCACHistoryVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__downloadCACHistoryVersion ** SOAP_FMAC4 soap_get_PointerTo_ns1__downloadCACHistoryVersion(struct soap *soap, _ns1__downloadCACHistoryVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__downloadCACHistoryVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__uploadCACConfigResponse(struct soap *soap, _ns1__uploadCACConfigResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__uploadCACConfigResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__uploadCACConfigResponse(struct soap *soap, const char *tag, int id, _ns1__uploadCACConfigResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__uploadCACConfigResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__uploadCACConfigResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__uploadCACConfigResponse(struct soap *soap, const char *tag, _ns1__uploadCACConfigResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__uploadCACConfigResponse **)soap_malloc(soap, sizeof(_ns1__uploadCACConfigResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__uploadCACConfigResponse *)soap_instantiate__ns1__uploadCACConfigResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__uploadCACConfigResponse ** p = (_ns1__uploadCACConfigResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__uploadCACConfigResponse, sizeof(_ns1__uploadCACConfigResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__uploadCACConfigResponse(struct soap *soap, _ns1__uploadCACConfigResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__uploadCACConfigResponse);
	if (soap_out_PointerTo_ns1__uploadCACConfigResponse(soap, tag?tag:"ns1:uploadCACConfigResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__uploadCACConfigResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__uploadCACConfigResponse(struct soap *soap, _ns1__uploadCACConfigResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__uploadCACConfigResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__uploadCACConfig(struct soap *soap, _ns1__uploadCACConfig *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__uploadCACConfig))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__uploadCACConfig(struct soap *soap, const char *tag, int id, _ns1__uploadCACConfig *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__uploadCACConfig);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__uploadCACConfig ** SOAP_FMAC4 soap_in_PointerTo_ns1__uploadCACConfig(struct soap *soap, const char *tag, _ns1__uploadCACConfig **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__uploadCACConfig **)soap_malloc(soap, sizeof(_ns1__uploadCACConfig *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__uploadCACConfig *)soap_instantiate__ns1__uploadCACConfig(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__uploadCACConfig ** p = (_ns1__uploadCACConfig **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__uploadCACConfig, sizeof(_ns1__uploadCACConfig), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__uploadCACConfig(struct soap *soap, _ns1__uploadCACConfig *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__uploadCACConfig);
	if (soap_out_PointerTo_ns1__uploadCACConfig(soap, tag?tag:"ns1:uploadCACConfig", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__uploadCACConfig ** SOAP_FMAC4 soap_get_PointerTo_ns1__uploadCACConfig(struct soap *soap, _ns1__uploadCACConfig **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__uploadCACConfig(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__uploadCACHeartbeatInfoResponse(struct soap *soap, _ns1__uploadCACHeartbeatInfoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__uploadCACHeartbeatInfoResponse(struct soap *soap, const char *tag, int id, _ns1__uploadCACHeartbeatInfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__uploadCACHeartbeatInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__uploadCACHeartbeatInfoResponse(struct soap *soap, const char *tag, _ns1__uploadCACHeartbeatInfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__uploadCACHeartbeatInfoResponse **)soap_malloc(soap, sizeof(_ns1__uploadCACHeartbeatInfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__uploadCACHeartbeatInfoResponse *)soap_instantiate__ns1__uploadCACHeartbeatInfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__uploadCACHeartbeatInfoResponse ** p = (_ns1__uploadCACHeartbeatInfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__uploadCACHeartbeatInfoResponse, sizeof(_ns1__uploadCACHeartbeatInfoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__uploadCACHeartbeatInfoResponse(struct soap *soap, _ns1__uploadCACHeartbeatInfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__uploadCACHeartbeatInfoResponse);
	if (soap_out_PointerTo_ns1__uploadCACHeartbeatInfoResponse(soap, tag?tag:"ns1:uploadCACHeartbeatInfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__uploadCACHeartbeatInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__uploadCACHeartbeatInfoResponse(struct soap *soap, _ns1__uploadCACHeartbeatInfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__uploadCACHeartbeatInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__uploadCACHeartbeatInfo(struct soap *soap, _ns1__uploadCACHeartbeatInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__uploadCACHeartbeatInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__uploadCACHeartbeatInfo(struct soap *soap, const char *tag, int id, _ns1__uploadCACHeartbeatInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__uploadCACHeartbeatInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__uploadCACHeartbeatInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__uploadCACHeartbeatInfo(struct soap *soap, const char *tag, _ns1__uploadCACHeartbeatInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__uploadCACHeartbeatInfo **)soap_malloc(soap, sizeof(_ns1__uploadCACHeartbeatInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__uploadCACHeartbeatInfo *)soap_instantiate__ns1__uploadCACHeartbeatInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__uploadCACHeartbeatInfo ** p = (_ns1__uploadCACHeartbeatInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__uploadCACHeartbeatInfo, sizeof(_ns1__uploadCACHeartbeatInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__uploadCACHeartbeatInfo(struct soap *soap, _ns1__uploadCACHeartbeatInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__uploadCACHeartbeatInfo);
	if (soap_out_PointerTo_ns1__uploadCACHeartbeatInfo(soap, tag?tag:"ns1:uploadCACHeartbeatInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__uploadCACHeartbeatInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__uploadCACHeartbeatInfo(struct soap *soap, _ns1__uploadCACHeartbeatInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__uploadCACHeartbeatInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__downloadCACLatestVersionResponse(struct soap *soap, _ns1__downloadCACLatestVersionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__downloadCACLatestVersionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__downloadCACLatestVersionResponse(struct soap *soap, const char *tag, int id, _ns1__downloadCACLatestVersionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__downloadCACLatestVersionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__downloadCACLatestVersionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__downloadCACLatestVersionResponse(struct soap *soap, const char *tag, _ns1__downloadCACLatestVersionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__downloadCACLatestVersionResponse **)soap_malloc(soap, sizeof(_ns1__downloadCACLatestVersionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__downloadCACLatestVersionResponse *)soap_instantiate__ns1__downloadCACLatestVersionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__downloadCACLatestVersionResponse ** p = (_ns1__downloadCACLatestVersionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__downloadCACLatestVersionResponse, sizeof(_ns1__downloadCACLatestVersionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__downloadCACLatestVersionResponse(struct soap *soap, _ns1__downloadCACLatestVersionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__downloadCACLatestVersionResponse);
	if (soap_out_PointerTo_ns1__downloadCACLatestVersionResponse(soap, tag?tag:"ns1:downloadCACLatestVersionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__downloadCACLatestVersionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__downloadCACLatestVersionResponse(struct soap *soap, _ns1__downloadCACLatestVersionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__downloadCACLatestVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__downloadCACLatestVersion(struct soap *soap, _ns1__downloadCACLatestVersion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__downloadCACLatestVersion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__downloadCACLatestVersion(struct soap *soap, const char *tag, int id, _ns1__downloadCACLatestVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__downloadCACLatestVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__downloadCACLatestVersion ** SOAP_FMAC4 soap_in_PointerTo_ns1__downloadCACLatestVersion(struct soap *soap, const char *tag, _ns1__downloadCACLatestVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__downloadCACLatestVersion **)soap_malloc(soap, sizeof(_ns1__downloadCACLatestVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__downloadCACLatestVersion *)soap_instantiate__ns1__downloadCACLatestVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__downloadCACLatestVersion ** p = (_ns1__downloadCACLatestVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__downloadCACLatestVersion, sizeof(_ns1__downloadCACLatestVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__downloadCACLatestVersion(struct soap *soap, _ns1__downloadCACLatestVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__downloadCACLatestVersion);
	if (soap_out_PointerTo_ns1__downloadCACLatestVersion(soap, tag?tag:"ns1:downloadCACLatestVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__downloadCACLatestVersion ** SOAP_FMAC4 soap_get_PointerTo_ns1__downloadCACLatestVersion(struct soap *soap, _ns1__downloadCACLatestVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__downloadCACLatestVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__downloadCACUpdateFileResponse(struct soap *soap, _ns1__downloadCACUpdateFileResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__downloadCACUpdateFileResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__downloadCACUpdateFileResponse(struct soap *soap, const char *tag, int id, _ns1__downloadCACUpdateFileResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__downloadCACUpdateFileResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__downloadCACUpdateFileResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__downloadCACUpdateFileResponse(struct soap *soap, const char *tag, _ns1__downloadCACUpdateFileResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__downloadCACUpdateFileResponse **)soap_malloc(soap, sizeof(_ns1__downloadCACUpdateFileResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__downloadCACUpdateFileResponse *)soap_instantiate__ns1__downloadCACUpdateFileResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__downloadCACUpdateFileResponse ** p = (_ns1__downloadCACUpdateFileResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__downloadCACUpdateFileResponse, sizeof(_ns1__downloadCACUpdateFileResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__downloadCACUpdateFileResponse(struct soap *soap, _ns1__downloadCACUpdateFileResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__downloadCACUpdateFileResponse);
	if (soap_out_PointerTo_ns1__downloadCACUpdateFileResponse(soap, tag?tag:"ns1:downloadCACUpdateFileResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__downloadCACUpdateFileResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__downloadCACUpdateFileResponse(struct soap *soap, _ns1__downloadCACUpdateFileResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__downloadCACUpdateFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__downloadCACUpdateFile(struct soap *soap, _ns1__downloadCACUpdateFile *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__downloadCACUpdateFile))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__downloadCACUpdateFile(struct soap *soap, const char *tag, int id, _ns1__downloadCACUpdateFile *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__downloadCACUpdateFile);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__downloadCACUpdateFile ** SOAP_FMAC4 soap_in_PointerTo_ns1__downloadCACUpdateFile(struct soap *soap, const char *tag, _ns1__downloadCACUpdateFile **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__downloadCACUpdateFile **)soap_malloc(soap, sizeof(_ns1__downloadCACUpdateFile *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__downloadCACUpdateFile *)soap_instantiate__ns1__downloadCACUpdateFile(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__downloadCACUpdateFile ** p = (_ns1__downloadCACUpdateFile **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__downloadCACUpdateFile, sizeof(_ns1__downloadCACUpdateFile), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__downloadCACUpdateFile(struct soap *soap, _ns1__downloadCACUpdateFile *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__downloadCACUpdateFile);
	if (soap_out_PointerTo_ns1__downloadCACUpdateFile(soap, tag?tag:"ns1:downloadCACUpdateFile", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__downloadCACUpdateFile ** SOAP_FMAC4 soap_get_PointerTo_ns1__downloadCACUpdateFile(struct soap *soap, _ns1__downloadCACUpdateFile **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__downloadCACUpdateFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__uploadCACDataResponse(struct soap *soap, _ns1__uploadCACDataResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__uploadCACDataResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__uploadCACDataResponse(struct soap *soap, const char *tag, int id, _ns1__uploadCACDataResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__uploadCACDataResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__uploadCACDataResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__uploadCACDataResponse(struct soap *soap, const char *tag, _ns1__uploadCACDataResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__uploadCACDataResponse **)soap_malloc(soap, sizeof(_ns1__uploadCACDataResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__uploadCACDataResponse *)soap_instantiate__ns1__uploadCACDataResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__uploadCACDataResponse ** p = (_ns1__uploadCACDataResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__uploadCACDataResponse, sizeof(_ns1__uploadCACDataResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__uploadCACDataResponse(struct soap *soap, _ns1__uploadCACDataResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__uploadCACDataResponse);
	if (soap_out_PointerTo_ns1__uploadCACDataResponse(soap, tag?tag:"ns1:uploadCACDataResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__uploadCACDataResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__uploadCACDataResponse(struct soap *soap, _ns1__uploadCACDataResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__uploadCACDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__uploadCACData(struct soap *soap, _ns1__uploadCACData *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__uploadCACData))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__uploadCACData(struct soap *soap, const char *tag, int id, _ns1__uploadCACData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__uploadCACData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__uploadCACData ** SOAP_FMAC4 soap_in_PointerTo_ns1__uploadCACData(struct soap *soap, const char *tag, _ns1__uploadCACData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__uploadCACData **)soap_malloc(soap, sizeof(_ns1__uploadCACData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__uploadCACData *)soap_instantiate__ns1__uploadCACData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__uploadCACData ** p = (_ns1__uploadCACData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__uploadCACData, sizeof(_ns1__uploadCACData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__uploadCACData(struct soap *soap, _ns1__uploadCACData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__uploadCACData);
	if (soap_out_PointerTo_ns1__uploadCACData(soap, tag?tag:"ns1:uploadCACData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__uploadCACData ** SOAP_FMAC4 soap_get_PointerTo_ns1__uploadCACData(struct soap *soap, _ns1__uploadCACData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__uploadCACData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
